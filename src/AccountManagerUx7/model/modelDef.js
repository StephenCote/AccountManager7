(function () {
  /// Generated by http://localhost:8080/AccountManagerService7/rest/schema

  let am7model = {
  "jsonModelKey": "schema",
  "categories": [
    {
      "schema": "system.modelCategory",
      "name": "identity",
      "label": "Identity",
      "icon": "account_tree",
      "order": [
        "system.user",
        "identity.person",
        "identity.account",
        "auth.role",
        "auth.permission",
        "identity.contact",
        "identity.address"
      ],
      "prototypes": [
        {
          "schema": "system.modelCategory",
          "name": "application",
          "pathName": "Applications",
          "prototype": true,
          "type": "group",
          "limit": [
            "data.data",
            "auth.group",
            "auth.permission",
            "identity.account"
          ],
          "icon": "web_asset",
          "order": [
            "identity.account",
            "auth.group",
            "auth.permission",
            "data.data"
          ]
        }
      ]
    },
    {
      "schema": "system.modelCategory",
      "label": "Assets",
      "name": "asset",
      "order": [
        "identity.application",
        "gallery",
        "article",
        "data.data",
        "data.note",
        "auth.group",
        "data.tag"
      ],
      "icon": "emoji_objects",
      "prototypes": [
        {
          "schema": "system.modelCategory",
          "name": "gallery",
          "prototype": true,
          "group": "Gallery",
          "label": "Gallery",
          "limit": [
            "data.data",
            "auth.group"
          ],
          "type": "group",
          "icon": "collections",
          "order": [
            "auth.group",
            "data.data"
          ]
        },
        {
          "schema": "system.modelCategory",
          "name": "article",
          "prototype": true,
          "group": "Articles",
          "limit": [
            "data.data",
            "auth.group"
          ],
          "type": "auth.group",
          "icon": "article",
          "label": "Articles",
          "order": [
            "auth.group",
            "data.data"
          ]
        }
      ]
    },
    {
      "schema": "system.modelCategory",
      "name": "process",
      "label": "Process",
      "order": [
        "access.accessRequest",
        "methodology",
        "process",
        "processstep"
      ],
      "icon": "insights"
    },
     {
        "schema": "system.modelCategory",
        "name": "event",
        "label": "Event",
        "order": [
          /*
          "message.spool",
          "data.geoLocation",
          "olio.event",
          "data.trait"
          */
          "olio.charPerson",
          "identity.voice",
          "olio.llm.chatConfig",
          "olio.llm.promptConfig",
          "olio.llm.openai.openaiRequest",
          "olio.apparel",
          "olio.wearable"
        ],
        "icon": "event_note"
      },
    {
      "schema": "system.modelCategory",
      "name": "policy",
      "label": "Policy",
      "order": [
        "policy.policy",
        "policy.rule",
        "policy.pattern",
        "policy.fact",
        "policy.operation",
        "policy.function"
      ],
      "icon": "policy"
    },
    {
      "schema": "system.modelCategory",
      "name": "form",
      "label": "Forms",
      "order": [
        "form",
        "formelement",
        "policy.validationrule"
      ],
      "icon": "dynamic_form"
    }
  ],
  "enums": {
    "fieldEnumType": [
      "BLOB",
      "BOOLEAN",
      "BYTE",
      "CALENDAR",
      "DOUBLE",
      "ENUM",
      "FLEX",
      "INT",
      "LIST",
      "LONG",
      "MODEL",
      "STRING",
      "TIMESTAMP",
      "ZONETIME",
      "VECTOR",
      "UNKNOWN"
    ],
    "systemPermissionEnumType": [
      "UNKNOWN",
      "CREATE",
      "READ",
      "UPDATE",
      "DELETE",
      "EXECUTE"
    ],
    "accountEnumType": [
      "UNKNOWN",
      "GUEST",
      "SYSTEM",
      "NORMAL",
      "DEVELOPMENT"
    ],
    "accountStatusEnumType": [
      "UNKNOWN",
      "UNREGISTERED",
      "NORMAL",
      "RESTRICTED",
      "REGISTERED",
      "DISABLED"
    ],
    "actionEnumType": [
      "UNKNOWN",
      "ADD",
      "EXECUTE",
      "DELETE",
      "MODIFY",
      "PATCH",
      "READ",
      "REQUEST",
      "RESPONSE",
      "GRANT",
      "DENY",
      "REJECT",
      "APPROVE",
      "AUTHENTICATE",
      "AUTHORIZE",
      "CLOSE",
      "OPEN",
      "REOPEN",
      "VECTORIZE"
    ],
    "approvalEnumType": [
      "UNKNOWN",
      "PRIVILEGED_ACCESS",
      "APPLICATION",
      "ACCESS",
      "FEDERAL",
      "OWNER"
    ],
    "approvalResponseEnumType": [
      "UNKNOWN",
      "APPROVE",
      "DENY",
      "REMOVE",
      "CERTIFIED",
      "PENDING",
      "DUPLICATE",
      "REQUEST"
    ],
    "approverEnumType": [
      "UNKNOWN",
      "GROUP",
      "PERSON",
      "APPLICATION",
      "PERMISSION",
      "ACCOUNT",
      "USER",
      "ROLE"
    ],
    "authenticationResponseEnumType": [
      "UNKNOWN",
      "AUTHENTICATED",
      "NOT_AUTHENTICATED",
      "STEP_UP_REQUIRED"
    ],
    "comparatorEnumType": [
      "UNKNOWN",
      "ANY",
      "NOT_ANY",
      "EQUALS",
      "NOT_EQUALS",
      "BETWEEN",
      "LESS_THAN",
      "LESS_THAN_OR_EQUALS",
      "GREATER_THAN",
      "GREATER_THAN_OR_EQUALS",
      "NOT_IN",
      "IN",
      "NOT_NULL",
      "IS_NULL",
      "IS_NULL_EQUALS",
      "IS_NULL_NOT_EQUALS",
      "LIKE",
      "ILIKE",
      "GROUP_AND",
      "GROUP_OR"
    ],
    "compressionEnumType": [
      "UNKNOWN",
      "NONE",
      "GZIP"
    ],
    "conditionEnumType": [
      "UNKNOWN",
      "ALL",
      "ANY",
      "NONE",
      "LESS_THAN",
      "LESS_THAN_OR_EQUALS",
      "GREATER_THAN",
      "GREATER_THAN_OR_EQUALS"
    ],
    "connectionEnumType": [
      "UNKNOWN",
      "POSTGRE",
      "H2"
    ],
    "contactEnumType": [
      "UNKNOWN",
      "PHONE",
      "EMAIL",
      "WEB",
      "OTHER",
      "PROFILE"
    ],
    "contactInformationEnumType": [
      "UNKNOWN",
      "INDIVIDUAL",
      "GROUP",
      "ORGANIZATION",
      "COMPANY",
      "ACCOUNT",
      "USER",
      "PERSON"
    ],
    "controlActionEnumType": [
      "UNKNOWN",
      "ACCESS",
      "READ",
      "WRITE",
      "DELETE",
      "UPDATE",
      "EXECUTE",
      "ANY"
    ],
    "controlEnumType": [
      "UNKNOWN",
      "POLICY"
    ],
    "credentialEnumType": [
      "UNKNOWN",
      "LEGACY_PASSWORD",
      "HASHED_PASSWORD",
      "SALT",
      "ENCRYPTED_PASSWORD",
      "ENCRYPTED_IDENTITY",
      "TOKEN",
      "CERTIFICATE",
      "SIGNATURE",
      "SESSION",
      "KEY",
      "KNOWLEDGE"
    ],
    "effectEnumType": [
      "UNKNOWN",
      "GRANT_PERMISSION",
      "DENY_PERMISSION",
      "AGGREGATE"
    ],
    "factEnumType": [
      "UNKNOWN",
      "GROUP",
      "ROLE",
      "PERMISSION",
      "PROPERTY",
      "ATTRIBUTE",
      "STATIC",
      "FACTORY",
      "REST",
      "FUNCTION",
      "SUBJECT",
      "CONTEXT",
      "PARAMETER",
      "OPERATION"
    ],
    "functionEnumType": [
      "UNKNOWN",
      "JAVASCRIPT",
      "JAVA",
      "REST"
    ],
    "groupEnumType": [
      "UNKNOWN",
      "ACCOUNT",
      "DATA",
      "BUCKET",
      "USER",
      "PERSON"
    ],
    "levelEnumType": [
      "UNKNOWN",
      "LOW",
      "MODERATE",
      "CONSIDERABLE",
      "HIGH",
      "SEVERE",
      "EXTREME",
      "GRAVE"
    ],
    "locationEnumType": [
      "UNKNOWN",
      "HOME",
      "WORK",
      "MOBILE",
      "OTHER",
      "NETWORK"
    ],
    "operationEnumType": [
      "UNKNOWN",
      "NAMED",
      "PERMISSION",
      "FUNCTION",
      "INTERNAL"
    ],
    "operationResponseEnumType": [
      "UNKNOWN",
      "SUCCEEDED",
      "FAILED",
      "ERROR"
    ],
    "orderEnumType": [
      "ASCENDING",
      "DESCENDING",
      "UNKNOWN"
    ],
    "organizationEnumType": [
      "UNKNOWN",
      "ROOT",
      "SYSTEM",
      "PUBLIC",
      "DEVELOPMENT"
    ],
    "patternEnumType": [
      "UNKNOWN",
      "PARAMETER",
      "FUNCTION",
      "OPERATION",
      "EXPRESSION",
      "AUTHORIZATION",
      "SEPARATION_OF_DUTY",
      "VERIFICATION",
      "APPROVAL"
    ],
    "permissionEnumType": [
      "UNKNOWN",
      "DATA",
      "GROUP",
      "ROLE",
      "PERMISSION",
      "ACCOUNT",
      "USER",
      "PERSON",
      "OBJECT",
      "APPLICATION"
    ],
    "policyRequestEnumType": [
      "UNKNOWN",
      "AUTHENTICATE",
      "DECIDE",
      "DEFINE",
      "SCORE"
    ],
    "policyResponseEnumType": [
      "UNKNOWN",
      "AUTHENTICATED",
      "PERMIT",
      "DENY",
      "PENDING",
      "PENDING_OPERATION",
      "INVALID_ARGUMENT",
      "ERROR",
      "BANNED",
      "DISABLED"
    ],
    "queryEnumType": [
      "UNKNOWN",
      "CREATEDDATE",
      "MODIFIEDDATE",
      "NAME",
      "ID"
    ],
    "responseEnumType": [
      "UNKNOWN",
      "PERMIT",
      "VALID",
      "INVALID",
      "DENY",
      "INFO",
      "PENDING"
    ],
    "roleEnumType": [
      "UNKNOWN",
      "ACCOUNT",
      "USER",
      "PERSON"
    ],
    "ruleEnumType": [
      "UNKNOWN",
      "PERMIT",
      "DENY"
    ],
    "spoolBucketEnumType": [
      "UNKNOWN",
      "RAW",
      "MESSAGE_QUEUE",
      "SECURITY_TOKEN",
      "REQUEST",
      "APPROVAL"
    ],
    "spoolNameEnumType": [
      "UNKNOWN",
      "GENERAL",
      "AUTHORIZATION",
      "STATE",
      "MESSAGE",
      "QUEUE",
      "DATA",
      "REQUEST",
      "ACCESS"
    ],
    "spoolStatusEnumType": [
      "UNKNOWN",
      "ERROR",
      "QUEUEING",
      "QUEUED",
      "TRANSMITTING",
      "TRANSMITTED",
      "SPOOLING",
      "SPOOLED",
      "ACKNOWLEGED_RECEIPT",
      "RESPONDED",
      "PERSISTED",
      "REJECTED",
      "DELETED"
    ],
    "sqlDataEnumType": [
      "UNKNOWN",
      "ARRAY",
      "BIGINT",
      "BINARY",
      "BIT",
      "BLOB",
      "BOOLEAN",
      "CHAR",
      "CLOB",
      "DATALINK",
      "DATE",
      "DECIMAL",
      "DISTINCT",
      "DOUBLE",
      "FLOAT",
      "INTEGER",
      "JAVA_OBJECT",
      "LONGVARBINARY",
      "LONGVARCHAR",
      "NULL",
      "NUMERIC",
      "OTHER",
      "REAL",
      "REF",
      "SMALLINT",
      "STRUCT",
      "TIME",
      "TIMESTAMP",
      "TINYINT",
      "VARBINARY",
      "VARCHAR",
      "VECTOR",
      "TEXT"
    ],
    "statisticsEnumType": [
      "UNKNOWN",
      "USER",
      "DATA",
      "ACCOUNT"
    ],
    "streamEnumType": [
      "UNKNOWN",
      "FILE",
      "NETWORK"
    ],
    "tagEnumType": [
      "UNKNOWN",
      "ACCOUNT",
      "DATA",
      "USER",
      "PERSON",
      "GROUP"
    ],
    "userEnumType": [
      "UNKNOWN",
      "GUEST",
      "SYSTEM",
      "NORMAL",
      "DEVELOPMENT"
    ],
    "userStatusEnumType": [
      "UNKNOWN",
      "UNREGISTERED",
      "NORMAL",
      "RESTRICTED",
      "REGISTERED",
      "DISABLED"
    ],
    "validationEnumType": [
      "UNKNOWN",
      "BOOLEAN",
      "FUNCTION",
      "REPLACEMENT",
      "NONE"
    ],
    "valueEnumType": [
      "UNKNOWN",
      "STRING",
      "INT",
      "LONG",
      "BOOLEAN",
      "DATETIME",
      "BYTE_ARRAY"
    ],
    "verificationEnumType": [
      "UNKNOWN",
      "DEFAULT",
      "VERIFIED",
      "NOT_VERIFIED",
      "ERROR"
    ],
    "alignmentEnumType": [
      "CHAOTICEVIL",
      "NEUTRALEVIL",
      "LAWFULEVIL",
      "CHAOTICNEUTRAL",
      "NEUTRAL",
      "UNKNOWN",
      "LAWFULNEUTRAL",
      "CHAOTICGOOD",
      "NEUTRALGOOD",
      "LAWFULGOOD"
    ],
    "assessedEnumType": [
      "UNKNOWN",
      "LOCATION",
      "GROUP",
      "INDIVIDUAL",
      "ENCOUNTER"
    ],
    "assessmentEnumType": [
      "UNKNOWN",
      "PHYSIOLOGICAL",
      "SAFETY",
      "LOVE",
      "ESTEEM",
      "SELF",
      "REPLENISH",
      "PREDICTION",
      "PREDILECTION",
      "CURIOSITY"
    ],
    "characterRoleEnumType": [
      "ACQUAINTENCE",
      "ANTAGONIST",
      "ANTIHERO",
      "CONFIDANT",
      "CONTAGONIST",
      "DEUTERAGONIST",
      "ENEMY_INTEREST",
      "FOIL",
      "GUIDE",
      "HENCHMAN",
      "INDETERMINATE",
      "LOVE_INTEREST",
      "STRANGER",
      "FRIEND_INTEREST",
      "COMPANION",
      "PROTAGONIST",
      "TEMPTRESS",
      "UNKNOWN"
    ],
    "densityEnumType": [
      "UNKNOWN",
      "ROADHOUSE",
      "HOMESTEAD",
      "BAND",
      "HAMLET",
      "TRIBE",
      "VILLAGE",
      "RESIDENTIAL_TOWN",
      "TOWN",
      "CITY",
      "METROPOLIS",
      "ECUMENOPOLIS"
    ],
    "directionEnumType": [
      "NORTH",
      "NORTHEAST",
      "EAST",
      "SOUTHEAST",
      "SOUTH",
      "SOUTHWEST",
      "WEST",
      "NORTHWEST",
      "UNKNOWN"
    ],
    "esteemNeedsEnumType": [
      "RESPECT",
      "SELF_ESTEEM",
      "STATUS",
      "RECOGNITION",
      "STRENGTH",
      "FREEDOM",
      "UNKNOWN"
    ],
    "ethnicityEnumType": [
      "A",
      "B",
      "D",
      "E",
      "F",
      "G",
      "H",
      "J",
      "K",
      "L",
      "P",
      "Q",
      "S",
      "T",
      "V",
      "W",
      "ZERO",
      "ONE",
      "TWO",
      "THREE",
      "FOUR",
      "FIVE",
      "SIX",
      "SEVEN",
      "EIGHT",
      "NINE",
      "TEN",
      "ELEVEN",
      "TWELVE",
      "THIRTEEN",
      "FOURTEEN"
    ],
    "highEnumType": [
      "DISREGARDED",
      "NEVER",
      "LOW",
      "MINIMAL",
      "DIMINISHED",
      "INSIGNIFICANT",
      "WEAK",
      "MODEST",
      "MARGINAL",
      "AVERAGE",
      "MODERATE",
      "INTERMEDIATE",
      "FAIR",
      "ADEQUATE",
      "BALANCED",
      "ELEVATED",
      "SUBSTANTIAL",
      "STRONG",
      "PROFOUND",
      "EXTENSIVE",
      "PEAK",
      "MAXIMUM",
      "HERO"
    ],
    "instinctEnumType": [
      "DISREGARDED",
      "INCONCEIVABLE",
      "FATAL",
      "VAGUE",
      "WEAK",
      "IMBALANCED",
      "INADEQUATE",
      "INSIGNIFICANT",
      "DIMINISHED",
      "BELOW_AVERAGE",
      "MINIMAL",
      "LOW",
      "STASIS",
      "MODEST",
      "MARGINAL",
      "AVERAGE",
      "FAIR",
      "ADEQUATE",
      "BALANCED",
      "ELEVATED",
      "STRONG",
      "PROFOUND",
      "PEAK",
      "UNCONTROLLABLE"
    ],
    "interactionEnumType": [
      "ACCOMMODATE",
      "ALLY",
      "BARTER",
      "BEFRIEND",
      "BETRAY",
      "BREAK_UP",
      "COERCE",
      "COMBAT",
      "COMMERCE",
      "COMMUNICATE",
      "COMPETE",
      "CONFLICT",
      "CONGREGATE",
      "COOPERATE",
      "CORRESPOND",
      "CRITICIZE",
      "DATE",
      "DEBATE",
      "DEFEND",
      "ENTERTAIN",
      "EXCHANGE",
      "EXPRESS_GRATITUDE",
      "EXPRESS_INDIFFERENCE",
      "HELP",
      "INTIMATE",
      "INVESTIGATE",
      "MENTOR",
      "NEGOTIATE",
      "NONE",
      "OPPOSE",
      "PEER_PRESSURE",
      "RECREATE",
      "RELATE",
      "ROMANCE",
      "SHUN",
      "SEPARATE",
      "SOCIALIZE",
      "THREATEN",
      "UNKNOWN"
    ],
    "loveNeedsEnumType": [
      "FRIENDSHIP",
      "INTIMACY",
      "FAMILY",
      "CONNECTION",
      "UNKNOWN"
    ],
    "outcomeEnumType": [
      "VERY_FAVORABLE",
      "FAVORABLE",
      "EQUILIBRIUM",
      "UNFAVORABLE",
      "VERY_UNFAVORABLE"
    ],
    "pointOfInterestEnumType": [
      "UNKNOWN",
      "COMMERCIAL",
      "RECREATIONAL",
      "LANDMARK",
      "ENCAMPMENT",
      "LAIR",
      "RUIN",
      "STASH",
      "RESOURCE",
      "HARVESTABLE",
      "ORE",
      "STRUCTURE"
    ],
    "raceEnumType": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "L",
      "R",
      "M",
      "S",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z"
    ],
    "reasonEnumType": [
      "AGE",
      "ALOOFNESS",
      "AMORALITY",
      "ATTRACTION",
      "ATTRACTIVE_NARCISSISM",
      "AVARICE",
      "COERCION",
      "COMMERCE",
      "COMMUNITY",
      "COMPANIONSHIP",
      "CONFIDENCE",
      "COWARDICE",
      "EXTRAVERSION",
      "FRIENDSHIP",
      "GENEROSITY",
      "GUARDIANSHIP",
      "HOSTILITY",
      "IMMATURITY",
      "INSTINCT",
      "INTIMACY",
      "INTIMIDATION",
      "INTRAVERSION",
      "LESS_ATTRACTIVE",
      "MACHIAVELLIANISM",
      "MATURITY",
      "MORALITY",
      "NARCISSISM",
      "NONE",
      "PEER_PRESSURE",
      "POLITICAL",
      "PSYCHOPATHY",
      "REVENGE",
      "REVULSION",
      "SADISM",
      "SANITY",
      "SENILITY",
      "SENSUALITY",
      "SPIRITUALITY",
      "SOCIALIZE",
      "UNKNOWN"
    ],
    "rollEnumType": [
      "UNKNOWN",
      "INVALID_STATISTIC",
      "CATASTROPHIC_FAILURE",
      "FAILURE",
      "SUCCESS",
      "NATURAL_SUCCESS"
    ],
    "safetyNeedsEnumType": [
      "SECURITY",
      "EMPLOYMENT",
      "RESOURCES",
      "HEALTH",
      "PROPERTY",
      "UNKNOWN"
    ],
    "threatEnumType": [
      "ANIMAL_TARGET",
      "ANIMAL_THREAT",
      "ECONOMIC_TARGET",
      "ECONOMIC_THREAT",
      "ENVIRONMENTAL_THREAT",
      "EXISTENTIAL_THREAT",
      "EXISTENTIAL_TARGET",
      "HEALTH_TARGET",
      "HEALTH_THREAT",
      "HOLLOW_THREAT",
      "IDEOLOGICAL_TARGET",
      "IDEOLOGICAL_THREAT",
      "NONE",
      "PERSONAL_TARGET",
      "PERSONAL_THREAT",
      "PHYSICAL_TARGET",
      "PHYSICAL_THREAT",
      "POLITICAL_TARGET",
      "POLITICAL_THREAT",
      "PSYCHOLOGICAL_TARGET",
      "PSYCHOLOGICAL_THREAT",
      "SOCIAL_TARGET",
      "SOCIAL_THREAT",
      "VERBAL_TARGET",
      "VERBAL_THREAT"
    ],
    "veryEnumType": [
      "DISREGARDED",
      "NEVER",
      "UNLIKELY",
      "SLIGHTLY",
      "NOT_USUALLY",
      "LESS_FREQUENTLY",
      "SOMEWHAT",
      "FREQUENTLY",
      "USUALLY",
      "MOSTLY",
      "VERY",
      "ALWAYS",
      "GUARANTEED"
    ],
    "wearLevelEnumType": [
      "NONE",
      "INTERNAL",
      "UNDER",
      "ON",
      "BASE",
      "ACCENT",
      "SUIT",
      "GARNITURE",
      "ACCESSORY",
      "OVER",
      "OUTER",
      "FULL_BODY",
      "ENCLOSURE",
      "UNKNOWN"
    ],
    "eSRBEnumType": [
      "E",
      "E10",
      "T",
      "M",
      "AO",
      "RC"
    ],
    "lLMServiceEnumType": [
      "UNKNOWN",
      "LOCAL",
      "OLLAMA",
      "OPENAI"
    ]
  },
  "models": [
    {
      "name": "common.name",
      "abstract": true,
      "fields": [
        {
          "label": "Name",
          "name": "name",
          "type": "string",
          "required": true,
          "index": true,
          "allowNull": false,
          "maxLength": 256,
          "rules": [
            "$notEmpty"
          ],
          "shortName": "n"
        }
      ]
    },
    {
      "name": "common.ownerId",
      "abstract": true,
      "fields": [
        {
          "name": "ownerId",
          "type": "long",
          "required": true,
          "private": true,
          "shortName": "ow"
        }
      ]
    },
    {
      "name": "common.objectId",
      "abstract": true,
      "hints": [
        "objectId"
      ],
      "fields": [
        {
          "name": "objectId",
          "type": "string",
          "identity": true,
          "readOnly": true,
          "maxLength": 64,
          "shortName": "oi"
        }
      ]
    },
    {
      "name": "common.attributeList",
      "abstract": true,
      "fields": [
        {
          "name": "attributes",
          "type": "list",
          "baseType": "model",
          "baseModel": "common.attribute",
          "referenced": true,
          "followReference": false,
          "shortName": "al"
        }
      ]
    },
    {
      "name": "system.organizationExt",
      "abstract": true,
      "fields": [
        {
          "name": "organizationPath",
          "type": "string",
          "virtual": true,
          "baseModel": "system.organization",
          "baseProperty": "organizationId",
          "provider": "org.cote.accountmanager.provider.PathProvider",
          "priority": 1,
          "shortName": "op"
        },
        {
          "name": "organizationId",
          "type": "long",
          "required": true,
          "private": true,
          "index": true,
          "dynamicPolicy": false,
          "shortName": "o"
        }
      ]
    },
    {
      "name": "common.populate",
      "abstract": true,
      "fields": [
        {
          "name": "populated",
          "type": "boolean",
          "ephemeral": true,
          "shortName": "pop"
        },
        {
          "name": "populatedFields",
          "type": "list",
          "baseType": "string",
          "ephemeral": true,
          "private": true,
          "shortName": "popf"
        }
      ]
    },
    {
      "name": "system.primaryKey",
      "abstract": true,
      "hints": [
        "id"
      ],
      "fields": [
        {
          "name": "id",
          "type": "long",
          "index": true,
          "identity": true,
          "readOnly": true,
          "private": true,
          "sequence": true,
          "primaryKey": true,
          "shortName": "i"
        }
      ]
    },
    {
      "name": "common.baseLight",
      "abstract": true,
      "inherits": [
        "common.ownerId",
        "common.objectId",
        "common.attributeList",
        "system.organizationExt",
        "common.populate",
        "system.primaryKey"
      ],
      "factory": "org.cote.accountmanager.factory.BaseFactory",
      "query": [
        "id",
        "objectId",
        "ownerId",
        "organizationId"
      ],
      "fields": []
    },
    {
      "name": "common.urn",
      "abstract": true,
      "hints": [
        "urn"
      ],
      "fields": [
        {
          "name": "urn",
          "type": "string",
          "readOnly": true,
          "provider": "org.cote.accountmanager.provider.UrnProvider",
          "priority": 3,
          "identity": true,
          "maxLength": 255,
          "shortName": "u"
        }
      ]
    },
    {
      "name": "dev.debug",
      "abstract": true,
      "fields": [
        {
          "name": "debug",
          "type": "boolean",
          "ephemeral": true,
          "shortName": "dbg"
        }
      ]
    },
    {
      "name": "common.base",
      "abstract": true,
      "inherits": [
        "common.baseLight",
        "common.urn",
        "dev.debug"
      ],
      "factory": "org.cote.accountmanager.factory.BaseFactory",
      "query": [
        "id",
        "urn",
        "objectId",
        "ownerId"
      ],
      "fields": []
    },
    {
      "name": "policy.controlsExt",
      "abstract": true,
      "fields": [
        {
          "name": "controls",
          "type": "list",
          "baseType": "model",
          "baseModel": "policy.control",
          "foreign": true,
          "followReference": false,
          "shortName": "ctls"
        }
      ]
    },
    {
      "name": "data.tagsExt",
      "abstract": true,
      "fields": [
        {
          "name": "tags",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.tag",
          "foreign": true,
          "participation": true,
          "followReference": true
        }
      ]
    },
    {
      "name": "common.nameId",
      "inherits": [
        "common.name",
        "common.base",
        "policy.controlsExt",
        "data.tagsExt"
      ],
      "abstract": true,
      "query": [
        "name"
      ],
      "fields": []
    },
    {
      "name": "common.parent",
      "abstract": true,
      "query": [
        "parentId"
      ],
      "validation": {
        "rules": [
          {
            "fields": [
              "parentId"
            ],
            "rules": [
              "$notInParent"
            ]
          }
        ]
      },
      "fields": [
        {
          "name": "parentId",
          "type": "long",
          "baseProperty": "id",
          "baseModel": "$self",
          "required": true,
          "index": true,
          "default": 0,
          "recursive": true,
          "shortName": "pi"
        }
      ]
    },
    {
      "name": "common.path",
      "abstract": true,
      "fields": [
        {
          "name": "path",
          "type": "string",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.PathProvider",
          "priority": 2
        }
      ]
    },
    {
      "name": "system.organization",
      "inherits": [
        "common.nameId",
        "common.parent",
        "common.path"
      ],
      "constraints": [
        "name, parentId"
      ],
      "icon": "public",
      "label": "Organization",
      "description": "Organization model for defining scope of all other models.",
      "fields": [
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.OrganizationEnumType",
          "type": "enum",
          "required": true,
          "index": true,
          "maxLength": 16
        }
      ]
    },
    {
      "name": "file.indexEntry",
      "ioConstraints": [
        "file"
      ],
      "abstract": true,
      "fields": [
        {
          "name": "id",
          "type": "long",
          "identity": true,
          "readOnly": true,
          "private": true
        },
        {
          "name": "objectId",
          "type": "string",
          "identity": true,
          "readOnly": true,
          "maxLength": 40
        },
        {
          "name": "name",
          "type": "string",
          "required": true
        },
        {
          "name": "indexModel",
          "type": "string",
          "maxLength": 32
        }
      ]
    },
    {
      "name": "file.simpleByteStore",
      "inherits": [
        "file.indexEntry"
      ],
      "ioConstraints": [
        "file"
      ],
      "fields": [
        {
          "name": "dataBytesStore",
          "type": "blob"
        }
      ]
    },
    {
      "name": "identity.contactInformationExt",
      "abstract": true,
      "fields": [
        {
          "name": "contactInformation",
          "baseModel": "identity.contactInformation",
          "type": "model",
          "foreign": true,
          "access": {
            "roles": {
              "read": [
                "AccountUsersReaders"
              ]
            }
          },
          "shortName": "ci"
        }
      ]
    },
    {
      "name": "system.user",
      "constraints": [
        "name, organizationId"
      ],
      "inherits": [
        "common.nameId",
        "identity.contactInformationExt"
      ],
      "icon": "verified_user",
      "label": "User",
      "validation": {
        "rules": [
          {
            "fields": [
              "name"
            ],
            "rules": [
              "$minLen5"
            ]
          }
        ]
      },
      "io": {
        "writer": "org.cote.accountmanager.io.factory.UserWriter"
      },
      "description": "User model for defining system users.",
      "access": {
        "roles": {
          "create": [
            "AccountAdministrators"
          ],
          "read": [
            "AccountAdministrators",
            "AccountUsersReaders"
          ],
          "update": [
            "AccountAdministrators"
          ],
          "delete": [
            "AccountAdministrators"
          ],
          "admin": [
            "AccountAdministrators"
          ]
        }
      },
      "query": [
        "name",
        "homeDirectory"
      ],
      "fields": [
        {
          "name": "homeDirectory",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true,
          "access": {
            "roles": {
              "read": [
                "AccountUsersReaders"
              ]
            }
          },
          "shortName": "hd"
        },
        {
          "name": "status",
          "baseClass": "org.cote.accountmanager.schema.type.UserStatusEnumType",
          "type": "enum",
          "maxLength": 16,
          "shortName": "stat"
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.UserEnumType",
          "type": "enum",
          "maxLength": 16
        }
      ]
    },
    {
      "name": "common.groupExt",
      "abstract": true,
      "query": [
        "groupId"
      ],
      "fields": [
        {
          "name": "groupId",
          "type": "long",
          "baseProperty": "id",
          "baseModel": "auth.group",
          "index": true,
          "recursive": true,
          "shortName": "g"
        },
        {
          "name": "groupPath",
          "type": "string",
          "virtual": true,
          "baseModel": "auth.group",
          "baseProperty": "groupId",
          "provider": "org.cote.accountmanager.provider.PathProvider",
          "priority": 1,
          "shortName": "gp"
        }
      ]
    },
    {
      "name": "data.directory",
      "inherits": [
        "common.groupExt",
        "common.nameId"
      ],
      "constraints": [
        "name, groupId, organizationId"
      ],
      "factory": "org.cote.accountmanager.factory.DirectoryFactory",
      "abstract": true,
      "query": [
        "groupId",
        "groupPath",
        "organizationId"
      ],
      "fields": []
    },
    {
      "name": "identity.account",
      "inherits": [
        "data.directory",
        "identity.contactInformationExt"
      ],
      "icon": "account_circle",
      "label": "Account",
      "group": "Accounts",
      "description": "An account represents a system or application identity outside the context of the AccountManager system.",
      "fields": [
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.AccountEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "status",
          "baseClass": "org.cote.accountmanager.schema.type.AccountStatusEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "referenceId",
          "type": "long"
        },
        {
          "name": "accountId",
          "type": "string",
          "maxLength": 40
        },
        {
          "name": "databaseRecord",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "common.description",
      "abstract": true,
      "fields": [
        {
          "name": "description",
          "type": "string",
          "maxLength": 512,
          "shortName": "dsc"
        }
      ]
    },
    {
      "name": "identity.person",
      "inherits": [
        "data.directory",
        "common.description",
        "identity.contactInformationExt"
      ],
      "icon": "person",
      "label": "Person",
      "group": "Persons",
      "dedicatedParticipation": true,
      "description": "Represents an individual identity which may or may not be associated with an account or user.",
      "fields": [
        {
          "name": "race",
          "type": "list",
          "baseType": "string",
          "shortName": "rac",
          "maxLength": 32
        },
        {
          "name": "ethnicity",
          "type": "list",
          "baseType": "string",
          "shortName": "eth"
        },
        {
          "name": "otherEthnicity",
          "type": "string",
          "shortName": "oeth",
          "maxLength": 32
        },
        {
          "name": "firstName",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "middleName",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "lastName",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "title",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "suffix",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "birthDate",
          "type": "zonetime"
        },
        {
          "name": "age",
          "type": "int"
        },
        {
          "name": "gender",
          "type": "string",
          "maxLength": 10
        },
        {
          "name": "alias",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "prefix",
          "type": "string",
          "maxLength": 10
        },
        {
          "name": "users",
          "baseType": "model",
          "baseModel": "system.user",
          "type": "list",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "accounts",
          "baseType": "model",
          "baseModel": "identity.account",
          "type": "list",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "partners",
          "baseType": "model",
          "baseModel": "$self",
          "type": "list",
          "foreign": true,
          "followReference": false,
          "participantModel": "person.partner"
        },
        {
          "name": "dependents",
          "baseType": "model",
          "baseModel": "$self",
          "type": "list",
          "foreign": true,
          "followReference": false,
          "participantModel": "person.dependent"
        },
        {
          "name": "siblings",
          "baseType": "model",
          "baseModel": "$self",
          "type": "list",
          "foreign": true,
          "followReference": false,
          "participantModel": "person.dependent"
        },
        {
          "name": "socialRing",
          "baseType": "model",
          "baseModel": "auth.role",
          "type": "list",
          "foreign": true,
          "followReference": false,
          "description": "The social ring is a hierarchy of peer groups by importance, and optionally by circumstance",
          "participantModel": "person.ring"
        },
        {
          "name": "notes",
          "baseType": "model",
          "baseModel": "data.note",
          "type": "list",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "personality",
          "type": "model",
          "baseModel": "identity.personality",
          "foreign": true,
          "shortName": "per"
        },
        {
          "name": "behavior",
          "type": "model",
          "baseModel": "identity.behavior",
          "foreign": true,
          "shortName": "beh"
        },
        {
          "name": "profile",
          "type": "model",
          "baseModel": "identity.profile",
          "foreign": true
        }
      ]
    },
    {
      "name": "auth.group",
      "inherits": [
        "common.nameId",
        "common.path",
        "common.parent",
        "common.description"
      ],
      "constraints": [
        "name, parentId, organizationId"
      ],
      "hints": [
        "name, type, parentId"
      ],
      "icon": "folder",
      "label": "Group",
      "dedicatedParticipation": true,
      "description": "Containers used to store collections of principles such as users, accounts, or persons, or other groups.  Nested groups of type 'data' are frequently used to emulate directory structures for organizing information.",
      "query": [
        "type",
        "path",
        "organizationId"
      ],
      "fields": [
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.GroupEnumType",
          "type": "enum",
          "required": true,
          "index": true,
          "maxLength": 16
        }
      ]
    },
    {
      "name": "common.reference",
      "abstract": true,
      "hints": [
        "referenceModel, referenceId"
      ],
      "fields": [
        {
          "name": "referenceModel",
          "type": "string",
          "maxLength": 64,
          "shortName": "rm"
        },
        {
          "name": "referenceId",
          "type": "long",
          "shortName": "ri"
        }
      ]
    },
    {
      "name": "common.attribute",
      "inherits": [
        "common.baseLight",
        "common.reference"
      ],
      "followReference": false,
      "description": "Attributes are used to store key/value pairs for objects. The valueType is used to determine how the value should be interpreted.",
      "access": {
        "roles": {
          "create": [
            "AccountUsers"
          ],
          "read": [
            "SystemAdministrators",
            "DataAdministrators"
          ],
          "update": [
            "AccountAdministrators"
          ],
          "delete": [
            "SystemAdministrators",
            "DataAdministrators"
          ],
          "admin": [
            "AccountAdministrators"
          ]
        }
      },
      "query": [
        "name",
        "value",
        "valueType"
      ],
      "sortField": "name",
      "sortOrder": "ASCENDING",
      "fields": [
        {
          "name": "value",
          "type": "flex",
          "valueType": "valueType",
          "shortName": "v"
        },
        {
          "name": "valueType",
          "baseClass": "org.cote.accountmanager.model.field.FieldEnumType",
          "type": "enum",
          "default": "string",
          "maxLength": 16,
          "shortName": "vt"
        },
        {
          "name": "valueModel",
          "type": "string",
          "maxLength": 128,
          "shortName": "vm"
        },
        {
          "name": "name",
          "type": "string",
          "maxLength": 64,
          "shortName": "n"
        }
      ]
    },
    {
      "name": "auth.role",
      "inherits": [
        "common.nameId",
        "common.path",
        "common.parent"
      ],
      "constraints": [
        "parentId, name, type, organizationId"
      ],
      "icon": "badge",
      "label": "Role",
      "dedicatedParticipation": true,
      "description": "Roles are used to group permissions and are typically assigned to users, accounts, persons, or groups. System role membership is also used for coarse API authorization.",
      "fields": [
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.RoleEnumType",
          "type": "enum",
          "index": true,
          "maxLength": 16
        }
      ]
    },
    {
      "name": "auth.permission",
      "inherits": [
        "common.nameId",
        "common.path",
        "common.parent"
      ],
      "constraints": [
        "parentId, name, type, organizationId"
      ],
      "icon": "shield",
      "label": "Permission",
      "dedicatedParticipation": true,
      "description": "Permissions are used to control access to resources and actions within the system. They are assigned to users, accounts, persons, groups, or roles through participations.",
      "fields": [
        {
          "label": "Type",
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.PermissionEnumType",
          "type": "enum",
          "index": true,
          "maxLength": 16
        }
      ]
    },
    {
      "name": "data.compression",
      "abstract": true,
      "fields": [
        {
          "name": "compressionType",
          "baseClass": "org.cote.accountmanager.schema.type.CompressionEnumType",
          "type": "enum",
          "maxLength": 16,
          "default": "UNKNOWN"
        }
      ]
    },
    {
      "name": "data.contentType",
      "abstract": true,
      "fields": [
        {
          "name": "contentType",
          "type": "string",
          "maxLength": 128
        }
      ]
    },
    {
      "name": "data.byteStore",
      "abstract": true,
      "inherits": [
        "data.compression",
        "data.contentType"
      ],
      "fields": [
        {
          "name": "dataBytesStore",
          "type": "blob"
        },
        {
          "name": "dataHash",
          "type": "string",
          "maxLength": 128
        },
        {
          "name": "readDataBytes",
          "type": "boolean",
          "virtual": true
        },
        {
          "name": "size",
          "type": "long"
        }
      ]
    },
    {
      "name": "crypto.cipherExt",
      "abstract": true,
      "fields": [
        {
          "name": "cipherKey",
          "type": "string",
          "ephemeral": true
        },
        {
          "name": "enciphered",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "crypto.vaultExt",
      "abstract": true,
      "fields": [
        {
          "name": "keyId",
          "type": "string",
          "maxLength": 64,
          "shortName": "kid"
        },
        {
          "name": "vaultId",
          "type": "string",
          "maxLength": 64,
          "shortName": "vid"
        },
        {
          "name": "vaulted",
          "type": "boolean",
          "shortName": "vb"
        },
        {
          "name": "vaultedFields",
          "type": "list",
          "baseType": "string",
          "ephemeral": true,
          "shortName": "vf"
        },
        {
          "name": "unvaultedFields",
          "type": "list",
          "baseType": "string",
          "ephemeral": true,
          "shortName": "uf"
        }
      ]
    },
    {
      "name": "crypto.cryptoByteStore",
      "abstract": true,
      "inherits": [
        "data.byteStore",
        "crypto.cipherExt",
        "crypto.vaultExt"
      ],
      "fields": []
    },
    {
      "name": "common.dateTime",
      "abstract": "true",
      "factory": "org.cote.accountmanager.factory.DateTimeFactory",
      "fields": [
        {
          "name": "createdDate",
          "type": "timestamp",
          "shortName": "cd"
        },
        {
          "name": "modifiedDate",
          "type": "timestamp",
          "shortName": "md"
        },
        {
          "name": "expiryDate",
          "type": "timestamp",
          "shortName": "ed"
        }
      ]
    },
    {
      "name": "data.streamExt",
      "abstract": true,
      "fields": [
        {
          "name": "stream",
          "baseModel": "data.stream",
          "type": "model",
          "foreign": true,
          "followReference": false
        }
      ]
    },
    {
      "name": "data.data",
      "inherits": [
        "data.directory",
        "crypto.cryptoByteStore",
        "common.description",
        "common.dateTime",
        "data.streamExt"
      ],
      "group": "Data",
      "icon": "data_object",
      "label": "Data",
      "dedicatedParticipation": true,
      "sortField": "name",
      "sortOrder": "ASCENDING",
      "query": [
        "contentType",
        "organizationId"
      ],
      "description": "Generic data storage model used to store various types of data, including files and streams.",
      "fields": [
        {
          "name": "dimensions",
          "type": "string",
          "maxLength": 32
        }
      ]
    },
    {
      "name": "policy.control",
      "inherits": [
        "common.nameId",
        "common.dateTime",
        "common.reference"
      ],
      "group": "Controls",
      "icon": "app_blocking",
      "label": "Control",
      "description": "A control is a specific action or set of actions that can be applied to a resource or policy to enforce security or compliance requirements.",
      "fields": [
        {
          "name": "controlId",
          "type": "long"
        },
        {
          "name": "controlType",
          "baseClass": "org.cote.accountmanager.schema.type.ControlEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "action",
          "baseClass": "org.cote.accountmanager.schema.type.ControlActionEnumType",
          "type": "enum",
          "maxLength": 16
        }
      ]
    },
    {
      "name": "auth.credential",
      "inherits": [
        "common.base",
        "common.dateTime",
        "crypto.vaultExt",
        "crypto.cipherExt",
        "common.reference"
      ],
      "factory": "org.cote.accountmanager.factory.CredentialFactory",
      "icon": "app_blocking",
      "label": "Credential",
      "description": "Credential that may be used to authenticate a principle, such as a user, person, or account.  Credentials are usually hashed passwords, certificates, or tokens.",
      "access": {
        "roles": {
          "create": [
            "AccountUsers"
          ],
          "read": [
            "SystemAdministrators",
            "DataAdministrators"
          ],
          "update": [
            "AccountAdministrators"
          ],
          "delete": [
            "SystemAdministrators",
            "DataAdministrators"
          ],
          "admin": [
            "AccountAdministrators"
          ]
        }
      },
      "fields": [
        {
          "name": "name",
          "type": "string",
          "ephemeral": true,
          "maxLength": 255
        },
        {
          "name": "hash",
          "baseModel": "crypto.hash",
          "type": "model",
          "foreign": true
        },
        {
          "name": "credential",
          "type": "blob"
        },
        {
          "name": "primary",
          "type": "boolean",
          "index": true
        },
        {
          "name": "previousCredentialId",
          "type": "long"
        },
        {
          "name": "nextCredentialId",
          "type": "long"
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.CredentialEnumType",
          "type": "enum",
          "maxLength": 32
        }
      ]
    },
    {
      "name": "policy.score",
      "abstract": true,
      "fields": [
        {
          "name": "score",
          "type": "int"
        }
      ]
    },
    {
      "name": "common.order",
      "abstract": true,
      "fields": [
        {
          "name": "order",
          "type": "int",
          "shortName": "ord"
        }
      ]
    },
    {
      "name": "policy.baseAuthorization",
      "abstract": true,
      "inherits": [
        "data.directory",
        "common.description",
        "common.dateTime",
        "policy.score",
        "common.order"
      ],
      "fields": []
    },
    {
      "name": "policy.operation",
      "inherits": [
        "policy.baseAuthorization"
      ],
      "group": "Operations",
      "icon": "call_to_action",
      "label": "Operation",
      "description": "An operation is a specific action or set of actions that can be performed on a resource or policy to achieve a desired outcome. Operations can be used to manipulate data, enforce policies, or derive new information based on existing data.",
      "fields": [
        {
          "name": "operation",
          "type": "string"
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.OperationEnumType",
          "type": "enum",
          "maxLength": 16
        }
      ]
    },
    {
      "name": "identity.contact",
      "inherits": [
        "data.directory",
        "common.description"
      ],
      "icon": "contact_page",
      "label": "Contact",
      "group": "Contacts",
      "description": "A contact is a method of reaching an individual or group. Contacts can be phone numbers, email or website addresses.",
      "fields": [
        {
          "name": "contactValue",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "contactType",
          "baseClass": "org.cote.accountmanager.schema.type.ContactEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "locationType",
          "baseClass": "org.cote.accountmanager.schema.type.LocationEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "preferred",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "identity.address",
      "inherits": [
        "data.directory",
        "common.description"
      ],
      "icon": "maps_home_work",
      "label": "Address",
      "group": "Addresses",
      "description": "An address represents a physical location, such as a home or office, that can be associated with an account or individual. It includes details like street, city, state, and postal code.",
      "fields": [
        {
          "name": "street",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "street2",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "city",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "region",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "state",
          "type": "string",
          "maxLength": 40
        },
        {
          "name": "postalCode",
          "type": "string",
          "maxLength": 12
        },
        {
          "name": "country",
          "type": "string",
          "maxLength": 40
        },
        {
          "name": "locationType",
          "baseClass": "org.cote.accountmanager.schema.type.LocationEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "location",
          "baseModel": "data.geoLocation",
          "type": "model",
          "foreign": true
        },
        {
          "name": "preferred",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "crypto.hash",
      "inherits": [
        "common.base"
      ],
      "description": "Cryptographic hash",
      "fields": [
        {
          "name": "keyFunction",
          "type": "string",
          "default": "PBKDF2WithHmacSHA512",
          "maxLength": 32
        },
        {
          "name": "algorithm",
          "type": "string",
          "default": "SHA3-224",
          "maxLength": 32
        },
        {
          "name": "prng",
          "type": "string",
          "default": "SHA1PRNG",
          "maxLength": 32
        },
        {
          "name": "salt",
          "type": "blob"
        }
      ]
    },
    {
      "name": "crypto.key",
      "inherits": [
        "common.base"
      ],
      "description": "Asymmetric key for cryptographic operations.",
      "fields": [
        {
          "name": "key",
          "type": "blob"
        },
        {
          "name": "keySpec",
          "type": "string",
          "default": "RSA",
          "maxLength": 32
        },
        {
          "name": "keyMode",
          "type": "string",
          "default": "RSA",
          "maxLength": 32
        },
        {
          "name": "keySize",
          "type": "int",
          "default": 2048
        }
      ]
    },
    {
      "name": "crypto.cipherKey",
      "inherits": [
        "common.base"
      ],
      "description": "Symmetric cipher key.",
      "fields": [
        {
          "name": "key",
          "type": "blob"
        },
        {
          "name": "keyId",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "iv",
          "type": "blob"
        },
        {
          "name": "encrypt",
          "type": "boolean",
          "default": false
        },
        {
          "name": "provider",
          "type": "string",
          "default": "BC",
          "maxLength": 32
        },
        {
          "name": "keySpec",
          "type": "string",
          "default": "AES",
          "maxLength": 32
        },
        {
          "name": "keyMode",
          "type": "string",
          "default": "AES/CBC/PKCS5Padding",
          "maxLength": 32
        },
        {
          "name": "keySize",
          "type": "int",
          "default": 256
        }
      ]
    },
    {
      "name": "crypto.keySet",
      "inherits": [
        "data.directory"
      ],
      "factory": "org.cote.accountmanager.factory.KeyFactory",
      "group": "Key Pairs",
      "description": "A pair of asymmetric keys and a symmetric cipher key for cryptographic operations.",
      "fields": [
        {
          "name": "hash",
          "baseModel": "crypto.hash",
          "type": "model",
          "foreign": true
        },
        {
          "name": "public",
          "baseModel": "crypto.key",
          "type": "model",
          "foreign": true
        },
        {
          "name": "private",
          "baseModel": "crypto.key",
          "type": "model",
          "foreign": true
        },
        {
          "name": "cipher",
          "baseModel": "crypto.cipherKey",
          "type": "model",
          "foreign": true
        },
        {
          "name": "agreementSpec",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "curveName",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "organizationKey",
          "type": "boolean"
        },
        {
          "name": "primaryKey",
          "type": "boolean"
        },
        {
          "name": "globalKey",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "crypto.rsaKey",
      "description": "Not used",
      "fields": [
        {
          "name": "modulus",
          "type": "blob"
        },
        {
          "name": "exponent",
          "type": "blob"
        },
        {
          "name": "d",
          "type": "blob"
        }
      ]
    },
    {
      "name": "policy.policy",
      "inherits": [
        "policy.baseAuthorization"
      ],
      "group": "Policies",
      "icon": "policy",
      "label": "Policy",
      "description": "A policy is a set of rules or guidelines that govern the behavior of users, systems, or processes within an organization. Policies can be used to enforce security, compliance, and operational standards across various domains.",
      "fields": [
        {
          "name": "rules",
          "baseModel": "policy.rule",
          "baseType": "model",
          "type": "list",
          "foreign": true
        },
        {
          "name": "enabled",
          "type": "boolean"
        },
        {
          "name": "decisionAge",
          "type": "long",
          "default": 0
        },
        {
          "name": "condition",
          "baseClass": "org.cote.accountmanager.schema.type.ConditionEnumType",
          "type": "enum",
          "maxLength": 16
        }
      ]
    },
    {
      "name": "policy.rule",
      "inherits": [
        "policy.baseAuthorization"
      ],
      "group": "Rules",
      "icon": "rule",
      "label": "Rule",
      "description": "A rule is a specific condition or set of conditions that must be met for a policy to be enforced or an operation to be executed. Rules can be used to define the logic and criteria for decision-making within policies and operations.",
      "fields": [
        {
          "name": "rules",
          "baseModel": "policy.rule",
          "type": "list",
          "baseType": "model",
          "foreign": true
        },
        {
          "name": "patterns",
          "baseModel": "policy.pattern",
          "baseType": "model",
          "type": "list",
          "foreign": true
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.RuleEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "condition",
          "baseClass": "org.cote.accountmanager.schema.type.ConditionEnumType",
          "type": "enum",
          "maxLength": 16
        }
      ]
    },
    {
      "name": "policy.pattern",
      "inherits": [
        "policy.baseAuthorization"
      ],
      "group": "Patterns",
      "icon": "texture",
      "label": "Pattern",
      "description": "A pattern is a reusable template or structure that defines how data or policies should be organized or processed. Patterns can be used to enforce consistency, derive new information, or apply specific logic to data or policies.",
      "fields": [
        {
          "name": "fact",
          "baseModel": "policy.fact",
          "type": "model",
          "foreign": true
        },
        {
          "name": "match",
          "baseModel": "policy.fact",
          "type": "model",
          "foreign": true
        },
        {
          "name": "operation",
          "baseModel": "policy.operation",
          "type": "model",
          "foreign": true
        },
        {
          "name": "operationClass",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "factUrn",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "comparator",
          "baseClass": "org.cote.accountmanager.schema.type.ComparatorEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.PatternEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "matchUrn",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "operationUrn",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "entitlementType",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "entitlementPath",
          "type": "string",
          "maxLength": 127
        }
      ]
    },
    {
      "name": "policy.fact",
      "inherits": [
        "policy.baseAuthorization"
      ],
      "group": "Facts",
      "icon": "fact_check",
      "label": "Fact",
      "description": "A fact is a piece of information that can be used in policies to make decisions. Facts can be derived from various sources and can have different types and values.",
      "fields": [
        {
          "name": "factReference",
          "baseModel": "common.nameId",
          "type": "model",
          "ephemeral": "true"
        },
        {
          "name": "factData",
          "type": "string"
        },
        {
          "name": "propertyName",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "parameters",
          "type": "list",
          "baseType": "model",
          "baseModel": "policy.factParameter"
        },
        {
          "name": "value",
          "type": "flex",
          "valueType": "valueType",
          "ephemeral": true
        },
        {
          "name": "valueType",
          "baseClass": "org.cote.accountmanager.model.field.FieldEnumType",
          "type": "enum",
          "maxLength": 16,
          "default": "UNKNOWN"
        },
        {
          "name": "class",
          "type": "string",
          "maxLength": 128
        },
        {
          "name": "factDataType",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "factType",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "sourceUrn",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "sourceDataType",
          "baseClass": "org.cote.accountmanager.schema.type.SqlDataEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "sourceUrl",
          "type": "string"
        },
        {
          "name": "sourceData",
          "type": "blob"
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.FactEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "modelType",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "sourceType",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "chatConfig",
          "baseModel": "olio.llm.chatConfig",
          "type": "model",
          "foreign": true
        },
        {
          "name": "promptConfig",
          "baseModel": "olio.llm.promptConfig",
          "type": "model",
          "foreign": true
        }

      ]
    },
    {
      "name": "policy.factParameter",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "name",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "value",
          "type": "flex",
          "valueType": "valueType"
        },
        {
          "name": "valueType",
          "baseClass": "org.cote.accountmanager.model.field.FieldEnumType",
          "type": "enum",
          "maxLength": 16,
          "default": "UNKNOWN"
        },
        {
          "name": "valueModel",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "match",
          "type": "boolean",
          "description": "Bit to differentiate the parameter between a fact and match fact."
        },
        {
          "name": "class",
          "type": "string",
          "maxLength": 128
        }
      ]
    },
    {
      "name": "policy.policyRequest",
      "factory": "org.cote.accountmanager.factory.PolicyRequestFactory",
      "description": "A policy request is a request for a policy to be applied to a resource or subject. It contains the necessary attributes and facts to evaluate the policy.",
      "fields": [
        {
          "name": "attributes",
          "baseModel": "common.attribute",
          "baseType": "model",
          "type": "list"
        },
        {
          "name": "facts",
          "baseModel": "policy.fact",
          "baseType": "model",
          "type": "list"
        },
        {
          "name": "contextUser",
          "type": "model",
          "baseModel": "system.user",
          "foreign": true
        },
        {
          "name": "urn",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "organizationPath",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.PolicyRequestEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "subject",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "subjectType",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "credentialType",
          "baseClass": "org.cote.accountmanager.schema.type.CredentialEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "verbose",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "policy.policyResponse",
      "inherits": [
        "common.attributeList",
        "policy.score",
        "common.description"
      ],
      "description": "A policy response is a structured response to a policy evaluation that includes messages, rule chains, pattern chains, and response data. It can also include metadata such as type, URN, and expiry date.",
      "fields": [
        {
          "name": "messages",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "ruleChain",
          "baseType": "string",
          "type": "list"
        },
        {
          "name": "patternChain",
          "baseType": "string",
          "type": "list"
        },
        {
          "name": "responseData",
          "baseType": "model",
          "baseModel": "common.base",
          "type": "list"
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.PolicyResponseEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "urn",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "expiryDate",
          "type": "timestamp"
        }
      ]
    },
    {
      "name": "policy.policyDefinition",
      "inherits": [
        "common.dateTime",
        "system.organizationExt"
      ],
      "description": "A policy definition is a publicly consummable version of a policy that identifies parameters to be populated.",
      "fields": [
        {
          "name": "parameters",
          "baseModel": "policy.fact",
          "baseType": "model",
          "type": "list"
        },
        {
          "name": "urn",
          "type": "string",
          "readOnly": true,
          "maxLength": 127
        },
        {
          "name": "enabled",
          "type": "boolean"
        },
        {
          "name": "decisionAge",
          "type": "long"
        }
      ]
    },
    {
      "name": "system.participation",
      "inherits": [
        "system.organizationExt",
        "system.primaryKey"
      ],
      "provider": "org.cote.accountmanager.provider.ParticipationProvider",
      "hints": [
        "participationId, participationModel",
        "participantId, participantModel",
        "participationId, participationModel, participantId, participantModel"
      ],
      "description": "Participation model for defining relationships between participants and resources.",
      "fields": [
        {
          "name": "ownerId",
          "type": "long",
          "required": true,
          "private": true
        },
        {
          "name": "participationId",
          "type": "long",
          "required": true
        },
        {
          "name": "participationModel",
          "type": "string",
          "required": true,
          "maxLength": 32
        },
        {
          "name": "participantId",
          "type": "long",
          "required": true
        },
        {
          "name": "participantModel",
          "type": "string",
          "required": true,
          "maxLength": 32
        },
        {
          "name": "permissionId",
          "type": "long"
        },
        {
          "name": "effectType",
          "baseClass": "org.cote.accountmanager.schema.type.EffectEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "enabled",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "io.query",
      "ioConstraints": [
        "unknown"
      ],
      "factory": "org.cote.accountmanager.factory.QueryFactory",
      "fields": [
        {
          "name": "urn",
          "type": "string",
          "identity": true,
          "maxLength": 255
        },
        {
          "name": "type",
          "type": "string",
          "required": true,
          "maxLength": 32
        },
        {
          "name": "alias",
          "type": "string",
          "ephemeral": true,
          "maxLength": 60
        },
        {
          "name": "count",
          "type": "int",
          "ephemeral": true,
          "private": true
        },
        {
          "name": "cache",
          "type": "boolean",
          "default": true
        },
        {
          "name": "executed",
          "type": "boolean",
          "ephemeral": true
        },
        {
          "name": "comparator",
          "baseClass": "org.cote.accountmanager.schema.type.ComparatorEnumType",
          "type": "enum",
          "default": "GROUP_AND",
          "maxLength": 16
        },
        {
          "name": "sortField",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "startRecord",
          "type": "long"
        },
        {
          "name": "recordCount",
          "type": "int"
        },
        {
          "name": "order",
          "baseClass": "org.cote.accountmanager.schema.type.OrderEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "queryKey",
          "type": "boolean"
        },
        {
          "name": "queryHash",
          "type": "boolean"
        },
        {
          "name": "request",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "contextUser",
          "type": "model",
          "baseModel": "system.user",
          "foreign": true
        },
        {
          "name": "limitFields",
          "type": "boolean",
          "default": true
        },
        {
          "name": "fields",
          "type": "list",
          "baseType": "model",
          "baseModel": "io.queryField"
        },
        {
          "name": "queries",
          "type": "list",
          "baseType": "model",
          "baseModel": "query",
          "internal": true,
          "description": "Used to extend the query model with another table, such as participation"
        },
        {
          "name": "joins",
          "type": "list",
          "baseType": "model",
          "baseModel": "query",
          "internal": true,
          "description": "Used to hold sub-queries constructed to reconstitute foreign key fields"
        },
        {
          "name": "joinKey",
          "type": "string",
          "maxLength": 32,
          "internal": true,
          "description": "Used to identify the foreignKey column that refers to the primary key.  Note: This column must exist in the model schema or will not be permitted"
        },
        {
          "name": "topCount",
          "type": "int"
        },
        {
          "name": "organizationId",
          "type": "long"
        },
        {
          "name": "groupBy",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "having",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "token",
          "type": "string",
          "ephemeral": true
        },
        {
          "name": "havingClause",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "inspect",
          "type": "boolean",
          "description": "Indicates to listening providers not to perform some actions intended for read operations"
        },
        {
          "name": "participation",
          "type": "model",
          "baseModel": "system.participation",
          "ephemeral": true
        },
        {
          "name": "plan",
          "type": "model",
          "baseModel": "io.queryPlan",
          "foreign": true
        },
        {
          "name": "debug",
          "type": "boolean",
          "ephemeral": true,
          "description": "For some reason, inheriting from 'debug' leads to a stackover flow, likely due to how query is used to initially lookup models loaded into the system"
        }
      ]
    },
    {
      "name": "io.queryField",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "comparator",
          "baseClass": "org.cote.accountmanager.schema.type.ComparatorEnumType",
          "type": "enum",
          "maxLength": 16,
          "default": "EQUALS"
        },
        {
          "name": "name",
          "type": "string",
          "required": true,
          "maxLength": 255
        },
        {
          "name": "value",
          "type": "flex",
          "valueType": "valueType",
          "required": true
        },
        {
          "name": "valueType",
          "description": "valueType is only meant to be used for certain serialization cases",
          "baseClass": "org.cote.accountmanager.model.field.FieldEnumType",
          "type": "enum",
          "maxLength": 16,
          "shortName": "vt"
        },
        {
          "name": "fields",
          "type": "list",
          "baseType": "model",
          "baseModel": "$self"
        }
      ]
    },
    {
      "name": "io.queryResult",
      "ioConstraints": [
        "file"
      ],
      "fields": [
        {
          "name": "type",
          "type": "string",
          "required": true,
          "maxLength": 32
        },
        {
          "name": "queryKey",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "queryHash",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "count",
          "type": "int"
        },
        {
          "name": "totalCount",
          "type": "long"
        },
        {
          "name": "results",
          "type": "list",
          "baseType": "model",
          "baseModel": "$flex"
        },
        {
          "name": "response",
          "baseClass": "org.cote.accountmanager.schema.type.OperationResponseEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "message",
          "type": "string",
          "maxLength": 255
        }
      ]
    },
    {
      "name": "io.queryPlan",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "modelName",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "fieldName",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "parent",
          "type": "model",
          "foreign": true,
          "followReference": false,
          "baseModel": "io.queryPlan",
          "ephemeral": true
        },
        {
          "name": "plans",
          "type": "list",
          "foreign": true,
          "baseType": "model",
          "baseModel": "io.queryPlan"
        },
        {
          "name": "fields",
          "type": "list",
          "baseType": "string"
        }
      ]
    },
    {
      "name": "data.journal",
      "inherits": [
        "common.base"
      ],
      "description": "Journal containing model change records.",
      "fields": [
        {
          "name": "journaled",
          "type": "boolean",
          "shortName": "jd"
        },
        {
          "name": "journalHash",
          "type": "blob",
          "shortName": "jh"
        },
        {
          "name": "journalVersion",
          "type": "double",
          "shortName": "jv"
        },
        {
          "name": "journalEntries",
          "baseModel": "data.journalEntry",
          "baseType": "model",
          "type": "list",
          "shortName": "je"
        }
      ]
    },
    {
      "name": "crypto.hashExt",
      "abstract": true,
      "fields": [
        {
          "name": "hash",
          "type": "blob",
          "restricted": true
        }
      ]
    },
    {
      "name": "data.journalEntry",
      "abstract": false,
      "emitModel": true,
      "inherits": [
        "crypto.hashExt"
      ],
      "description": "Record of a model change.",
      "fields": [
        {
          "name": "journalDate",
          "type": "timestamp",
          "shortName": "jd"
        },
        {
          "name": "version",
          "type": "double",
          "shortName": "jv"
        },
        {
          "name": "baseline",
          "type": "boolean",
          "shortName": "jb"
        },
        {
          "name": "modified",
          "baseModel": "$flex",
          "type": "model",
          "shortName": "jm"
        },
        {
          "name": "fields",
          "type": "list",
          "baseType": "string",
          "shortName": "jf"
        }
      ]
    },
    {
      "name": "file.participationList",
      "inherits": [
        "system.organizationExt"
      ],
      "ioConstraints": [
        "file"
      ],
      "fields": [
        {
          "name": "id",
          "type": "long",
          "identity": true,
          "readOnly": true,
          "private": true
        },
        {
          "name": "name",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "partId",
          "type": "long"
        },
        {
          "name": "parts",
          "type": "list",
          "baseType": "model",
          "baseModel": "file.participationEntry"
        }
      ]
    },
    {
      "name": "file.participationEntry",
      "ioConstraints": [
        "file"
      ],
      "fields": [
        {
          "name": "partId",
          "type": "long"
        },
        {
          "name": "type",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "permissionId",
          "type": "long"
        },
        {
          "name": "effectType",
          "type": "enum",
          "baseClass": "org.cote.accountmanager.schema.type.EffectEnumType",
          "maxLength": 16
        }
      ]
    },
    {
      "name": "message.recipient",
      "abstract": true,
      "fields": [
        {
          "name": "recipientId",
          "type": "long"
        },
        {
          "name": "recipientType",
          "type": "string",
          "maxLength": 32
        }
      ]
    },
    {
      "name": "message.sender",
      "abstract": true,
      "fields": [
        {
          "name": "senderId",
          "type": "long"
        },
        {
          "name": "senderType",
          "type": "string",
          "maxLength": 32
        }
      ]
    },
    {
      "name": "message.spool",
      "inherits": [
        "common.dateTime",
        "system.organizationExt",
        "system.primaryKey",
        "common.reference",
        "message.recipient",
        "message.sender"
      ],
      "description": "A spool is a temporary storage for messages that are queued for processing or delivery. Spools can be used to manage message flow, handle retries, and ensure that messages are delivered even if the recipient is temporarily unavailable.",
      "fields": [
        {
          "name": "data",
          "type": "blob"
        },
        {
          "name": "objectId",
          "type": "string",
          "identity": true,
          "readOnly": true,
          "maxLength": 60
        },
        {
          "name": "spoolBucketType",
          "baseClass": "org.cote.accountmanager.schema.type.SpoolBucketEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "spoolBucketName",
          "baseClass": "org.cote.accountmanager.schema.type.SpoolNameEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "valueType",
          "baseClass": "org.cote.accountmanager.schema.type.ValueEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "ownerId",
          "type": "long"
        },
        {
          "name": "spoolStatus",
          "baseClass": "org.cote.accountmanager.schema.type.SpoolStatusEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "expires",
          "type": "boolean"
        },
        {
          "name": "transportType",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "credentialId",
          "type": "long"
        },
        {
          "name": "parentObjectId",
          "type": "string",
          "maxLength": 60
        },
        {
          "name": "currentLevel",
          "type": "int"
        },
        {
          "name": "endLevel",
          "type": "int"
        },
        {
          "name": "classification",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "groupId",
          "type": "long",
          "baseModel": "auth.group"
        },
        {
          "name": "groupPath",
          "type": "string",
          "virtual": true,
          "baseModel": "auth.group",
          "baseProperty": "groupId",
          "provider": "org.cote.accountmanager.provider.PathProvider"
        },
        {
          "name": "modelType",
          "type": "string",
          "maxLength": 32
        }
      ]
    },
    {
      "name": "auth.token",
      "inherits": [
        "message.spool"
      ],
      "factory": "org.cote.accountmanager.factory.TokenFactory",
      "description": "Not used",
      "fields": []
    },
    {
      "name": "dev.parameter",
      "inherits": [
        "common.attribute"
      ],
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "valueSchema",
          "type": "string",
          "description": "A JSON schema for the parameter value, for use when the entire object model may not be available."
        }
      ]
    },
    {
      "name": "dev.parameterList",
      "factory": "org.cote.accountmanager.factory.ParameterListFactory",
      "ioConstraints": [
        "file"
      ],
      "fields": [
        {
          "name": "parameters",
          "type": "list",
          "baseType": "model",
          "baseModel": "dev.parameter"
        }
      ]
    },
    {
      "name": "file.index2",
      "factory": "org.cote.accountmanager.factory.ParameterListFactory",
      "ioConstraints": [
        "file"
      ],
      "fields": [
        {
          "name": "lastId",
          "type": "long",
          "default": 100
        },
        {
          "name": "entries",
          "type": "list",
          "baseType": "model",
          "baseModel": "file.indexEntry2"
        }
      ]
    },
    {
      "name": "file.indexEntry2",
      "ioConstraints": [
        "file"
      ],
      "fields": [
        {
          "name": "type",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "values",
          "type": "list",
          "baseType": "model",
          "baseModel": "file.indexEntryValue2"
        }
      ]
    },
    {
      "name": "file.indexEntryValue2",
      "ioConstraints": [
        "file"
      ],
      "inherits": [
        "common.attribute"
      ],
      "fields": []
    },
    {
      "name": "file.indexStore",
      "inherits": [
        "file.simpleByteStore"
      ],
      "ioConstraints": [
        "file"
      ],
      "fields": []
    },
    {
      "name": "crypto.keyStore",
      "inherits": [
        "data.directory"
      ],
      "group": "Key Stores",
      "description": "Repository for cryptographic keys and certificates. It can be used to store private keys, public keys, and certificates in a secure manner.",
      "fields": [
        {
          "name": "alias",
          "type": "String"
        },
        {
          "name": "type",
          "type": "String",
          "default": "PKCS12",
          "maxLength": 32
        },
        {
          "name": "store",
          "type": "blob",
          "readOnly": true
        },
        {
          "name": "credential",
          "type": "model",
          "baseModel": "auth.credential",
          "foreign": true
        },
        {
          "name": "keySet",
          "baseModel": "crypto.keySet",
          "type": "model",
          "foreign": true
        }
      ]
    },
    {
      "name": "crypto.vault",
      "inherits": [
        "data.directory",
        "common.dateTime"
      ],
      "ephemeral": false,
      "group": ".vault",
      "description": "Specialized key store used to store encrypted cryptographic keys outside of the database.",
      "fields": [
        {
          "name": "alias",
          "type": "String",
          "maxLength": 64
        },
        {
          "name": "keyPath",
          "type": "blob"
        },
        {
          "name": "vaultPath",
          "type": "blob"
        },
        {
          "name": "nameHash",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "activeKey",
          "baseModel": "crypto.keySet",
          "type": "model",
          "foreign": true,
          "ephemeral": false
        },
        {
          "name": "vaultKey",
          "baseModel": "crypto.keySet",
          "type": "model",
          "foreign": true,
          "ephemeral": true
        },
        {
          "name": "public",
          "baseModel": "crypto.keySet",
          "type": "model",
          "foreign": true
        },
        {
          "name": "salt",
          "baseModel": "crypto.keySet",
          "type": "model",
          "foreign": true
        },
        {
          "name": "serviceUser",
          "baseModel": "system.user",
          "type": "model",
          "foreign": true
        },
        {
          "name": "credential",
          "baseModel": "auth.credential",
          "type": "model",
          "foreign": false
        },
        {
          "name": "protectedCredential",
          "baseModel": "auth.credential",
          "type": "model",
          "foreign": true,
          "ephemeral": true
        },
        {
          "name": "protectedCredentialPath",
          "type": "blob"
        },
        {
          "name": "vaultGroup",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "groupName",
          "type": "String",
          "default": ".vault",
          "maxLength": 127
        },
        {
          "name": "vaultLink",
          "type": "string",
          "maxLength": 60
        },
        {
          "name": "keyExtension",
          "type": "string",
          "default": ".mprv",
          "maxLength": 10
        },
        {
          "name": "keyPrefix",
          "type": "string",
          "default": "Vault",
          "maxLength": 10
        },
        {
          "name": "keyProtectedPrefix",
          "type": "string",
          "default": "Prot",
          "maxLength": 10
        },
        {
          "name": "haveVaultKey",
          "type": "boolean"
        },
        {
          "name": "protected",
          "type": "boolean"
        },
        {
          "name": "haveCredential",
          "type": "boolean"
        },
        {
          "name": "dn",
          "type": "String",
          "maxLength": 255
        },
        {
          "name": "initialized",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "identity.subject",
      "abstract": true,
      "fields": [
        {
          "name": "subject",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "subjectType"
        },
        {
          "name": "subjectType",
          "type": "string",
          "maxLength": 64
        }
      ]
    },
    {
      "name": "access.submitter",
      "abstract": true,
      "fields": [
        {
          "name": "submitter",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "subjectType"
        },
        {
          "name": "submitterType",
          "type": "string",
          "maxLength": 64
        }
      ]
    },
    {
      "name": "access.requester",
      "abstract": true,
      "fields": [
        {
          "name": "requester",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "requesterType"
        },
        {
          "name": "requesterType",
          "type": "string",
          "maxLength": 64
        }
      ]
    },
    {
      "name": "access.request",
      "abstract": true,
      "inherits": [
        "identity.subject",
        "access.submitter",
        "access.requester"
      ],
      "fields": [
        {
          "name": "action",
          "baseClass": "org.cote.accountmanager.schema.type.ActionEnumType",
          "type": "enum",
          "maxLength": 16
        }
      ]
    },
    {
      "name": "auth.authenticationRequest",
      "inherits": [
        "access.request"
      ],
      "description": "Authentication request used to pass credentials or tokens for an actor, such as a user, person, or account.",
      "fields": [
        {
          "name": "credential",
          "type": "blob"
        },
        {
          "name": "checkCredential",
          "type": "blob"
        },
        {
          "name": "credentialType",
          "baseClass": "org.cote.accountmanager.schema.type.CredentialEnumType",
          "type": "enum",
          "index": true,
          "maxLength": 16
        },
        {
          "name": "checkCredentialType",
          "baseClass": "org.cote.accountmanager.schema.type.CredentialEnumType",
          "type": "enum",
          "index": true,
          "maxLength": 16
        },
        {
          "name": "tokens",
          "type": "list",
          "baseType": "string"
        }
      ]
    },
    {
      "name": "policy.response",
      "inherits": [
        "system.organizationExt"
      ],
      "abstract": true,
      "fields": [
        {
          "name": "message",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.OperationResponseEnumType",
          "type": "enum",
          "index": true,
          "maxLength": 16
        }
      ]
    },
    {
      "name": "auth.authenticationResponse",
      "inherits": [
        "policy.response"
      ],
      "description": "Authentication response used to return the result of an authentication request. This is typically used to return a token and a reference to the authenticated principle.",
      "fields": [
        {
          "name": "principle",
          "type": "model"
        },
        {
          "name": "tokens",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "response",
          "baseClass": "org.cote.accountmanager.schema.type.AuthenticationResponseEnumType",
          "type": "enum",
          "index": true,
          "maxLength": 16
        }
      ]
    },
    {
      "name": "common.description2K",
      "abstract": true,
      "fields": [
        {
          "name": "description",
          "type": "string",
          "maxLength": 2048,
          "shortName": "dsc"
        }
      ]
    },
    {
      "name": "crypto.signature",
      "abstract": true,
      "fields": [
        {
          "name": "signature",
          "type": "blob",
          "restricted": true
        }
      ]
    },
    {
      "name": "system.audit",
      "inherits": [
        "common.dateTime",
        "system.organizationExt",
        "common.description2K",
        "system.primaryKey",
        "crypto.signature",
        "crypto.hashExt",
        "identity.subject"
      ],
      "factory": "org.cote.accountmanager.factory.AuditFactory",
      "autoCreateForeignReference": false,
      "description": "Audit records for actions taken in the system",
      "fields": [
        {
          "name": "objectId",
          "type": "string",
          "identity": true,
          "readOnly": true,
          "maxLength": 40
        },
        {
          "name": "action",
          "baseClass": "org.cote.accountmanager.schema.type.ActionEnumType",
          "type": "enum",
          "index": true,
          "maxLength": 16
        },
        {
          "name": "response",
          "baseClass": "org.cote.accountmanager.schema.type.ResponseEnumType",
          "type": "enum",
          "index": true,
          "maxLength": 16
        },
        {
          "name": "resource",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "resourceType"
        },
        {
          "name": "resourceType",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "contextUser",
          "baseModel": "system.user",
          "type": "model",
          "foreign": true
        },
        {
          "name": "message",
          "type": "string",
          "maxLength": 2048
        },
        {
          "name": "query",
          "type": "string"
        },
        {
          "name": "policy",
          "baseModel": "policy.policyResponse",
          "type": "model"
        }
      ]
    },
    {
      "name": "identity.contactInformation",
      "inherits": [
        "common.ownerId",
        "common.objectId",
        "system.organizationExt",
        "common.populate",
        "system.primaryKey",
        "common.reference",
        "common.urn"
      ],
      "access": {
        "roles": {
          "create": [
            "AccountUsers"
          ],
          "read": [
            "SystemAdministrators",
            "DataAdministrators"
          ],
          "update": [
            "AccountAdministrators"
          ],
          "delete": [
            "SystemAdministrators",
            "DataAdministrators"
          ],
          "admin": [
            "AccountAdministrators"
          ]
        },
        "policies": {
          "bind": {
            "objectId": "referenceId",
            "objectSchema": "referenceModel",
            "description": "Defer to the object identified by 'propertyName' when performing policy evaluations.  This is to allow for ephemeral objects to be authorized and audited in a uniform fashion"
          }
        }
      },
      "description": "A contact information record for a person or organization.  This is used to store phone numbers, emails, and other contact information.",
      "followReference": false,
      "dedicatedParticipation": true,
      "query": [
        "referenceId",
        "referenceModel",
        "id",
        "ownerId",
        "organizationId"
      ],
      "fields": [
        {
          "name": "contacts",
          "baseModel": "identity.contact",
          "baseType": "model",
          "foreign": true,
          "type": "list",
          "participantModel": "ci.contact"
        },
        {
          "name": "addresses",
          "baseModel": "identity.address",
          "baseType": "model",
          "foreign": true,
          "type": "list",
          "participantModel": "ci.address"
        },
        {
          "name": "contactInformationType",
          "baseClass": "org.cote.accountmanager.schema.type.ContactInformationEnumType",
          "type": "enum",
          "maxLength": 16
        }
      ]
    },
    {
      "name": "auth.entitlement",
      "abstract": true,
      "fields": [
        {
          "name": "entitlementType",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "entitlement",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "entitlementType",
          "access": {
            "roles": {
              "create": [
                "AccountUsersReaders",
                "RequestReaders",
                "RoleReaders",
                "PermissionReaders"
              ],
              "read": [
                "AccountUsersReaders",
                "RequestReaders",
                "RoleReaders",
                "PermissionReaders"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "access.baseAccess",
      "abstract": "true",
      "inherits": [
        "common.nameId",
        "common.parent",
        "access.request",
        "auth.entitlement",
        "common.dateTime",
        "common.description"
      ],
      "fields": [
        {
          "name": "resourceData",
          "baseModel": "$flex",
          "type": "model",
          "foreignType": "resourceType",
          "description": "Placeholder for serialized non-persisted objects"
        },
        {
          "name": "resource",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "resourceType",
          "access": {
            "roles": {
              "read": [
                "RequestReaders"
              ]
            }
          }
        },
        {
          "name": "resourceType",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "token",
          "type": "string"
        }
      ]
    },
    {
      "name": "access.approver",
      "abstract": true,
      "inherits": [
        "crypto.signature"
      ],
      "description": "An approver for an access request.  This could be a user, a person, an account, a group, or a role.",
      "fields": [
        {
          "name": "approver",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "approverType",
          "access": {
            "roles": {
              "read": [
                "AccountUsersReaders",
                "RequestReaders"
              ]
            }
          }
        },
        {
          "name": "approverType",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "delegate",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "delegateType",
          "access": {
            "roles": {
              "read": [
                "AccountUsersReaders",
                "RequestReaders"
              ]
            }
          }
        },
        {
          "name": "delegateType",
          "type": "string",
          "maxLength": 64
        }
      ]
    },
    {
      "name": "access.accessRequest",
      "inherits": [
        "access.baseAccess",
        "access.approver",
        "crypto.hashExt"
      ],
      "factory": "org.cote.accountmanager.factory.AccessRequestFactory",
      "icon": "switch_access_shortcut",
      "label": "Access Request",
      "description": "A request for access to a resource.  This is typically used to request membership in a group, role, or request an entitlement to a resource that requires approval.",
      "access": {
        "roles": {
          "create": [
            "Requesters"
          ],
          "read": [
            "RequestReaders"
          ],
          "update": [
            "RequestUpdaters",
            "RequestAdministrators"
          ],
          "delete": [
            "RequestAdministrators"
          ],
          "admin": [
            "RequestAdministrators"
          ]
        }
      },
      "fields": [
        {
          "name": "messages",
          "baseModel": "message.spool",
          "baseType": "model",
          "type": "list"
        },
        {
          "name": "approvalStatus",
          "baseClass": "org.cote.accountmanager.schema.type.ApprovalResponseEnumType",
          "type": "enum",
          "default": "UNKNOWN",
          "maxLength": 32,
          "access": {
            "roles": {
              "update": [
                "Approvers",
                "RequestUpdaters"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "system.modelSchema",
      "inherits": [
        "common.nameId"
      ],
      "constraints": [
        "name, organizationId"
      ],
      "query": [
        "name",
        "schemaData"
      ],
      "description": "Model schema for persisting model structures",
      "fields": [
        {
          "name": "schemaData",
          "type": "blob"
        }
      ]
    },
    {
      "name": "data.stream",
      "inherits": [
        "data.directory",
        "common.description",
        "common.dateTime",
        "data.contentType",
        "crypto.vaultExt"
      ],
      "provider": "org.cote.accountmanager.provider.StreamProvider",
      "query": [
        "contentType",
        "type"
      ],
      "description": "Model used to store and retrieve streams of data.",
      "fields": [
        {
          "name": "streamSource",
          "type": "string",
          "provider": "org.cote.accountmanager.provider.EncryptFieldProvider",
          "priority": 10,
          "encrypt": true
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.StreamEnumType",
          "type": "enum",
          "default": "UNKNOWN",
          "maxLength": 16
        },
        {
          "name": "size",
          "type": "long"
        },
        {
          "name": "segments",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.streamSegment",
          "ephemeral": true
        }
      ]
    },
    {
      "name": "data.streamSegment",
      "ephemeral": true,
      "io": {
        "reader": "org.cote.accountmanager.io.stream.StreamSegmentReader",
        "writer": "org.cote.accountmanager.io.stream.StreamSegmentWriter",
        "search": "org.cote.accountmanager.io.stream.StreamSegmentSearch"
      },
      "access": {
        "policies": {
          "bind": {
            "objectId": "streamId",
            "schema": "data.stream",
            "description": "Defer to the object identified by 'propertyName' when performing policy evaluations.  This is to allow for ephemeral objects to be authorized and audited in a uniform fashion"
          }
        }
      },
      "fields": [
        {
          "name": "streamId",
          "type": "string",
          "maxLength": 60,
          "ephemeral": true
        },
        {
          "name": "stream",
          "type": "blob",
          "ephemeral": true
        },
        {
          "name": "startPosition",
          "type": "long",
          "ephemeral": true
        },
        {
          "name": "length",
          "type": "long",
          "ephemeral": true
        },
        {
          "name": "size",
          "type": "long",
          "ephemeral": true
        },
        {
          "name": "read",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "data.thumbnail",
      "inherits": [
        "data.directory",
        "crypto.cryptoByteStore",
        "common.dateTime"
      ],
      "access": {
        "policies": {
          "bind": {
            "objectId": "referenceId",
            "schema": "data.data",
            "description": "Defer to the object identified by 'propertyName' when performing policy evaluations.  This is to allow for ephemeral objects to be authorized and audited in a uniform fashion"
          }
        }
      },
      "description": "Smaller representation of an image.",
      "fields": [
        {
          "name": "referenceId",
          "type": "string",
          "maxLength": 60
        },
        {
          "name": "referenceModel",
          "type": "string",
          "maxLength": 32,
          "default": "data"
        },
        {
          "name": "width",
          "type": "int"
        },
        {
          "name": "height",
          "type": "int"
        }
      ]
    },
    {
      "name": "policy.validationRule",
      "inherits": [
        "data.directory",
        "common.description"
      ],
      "icon": "rule",
      "label": "Validation Rule",
      "group": "Validation Rules",
      "description": "A validation rule is a specific condition or set of conditions that must be met for data to be considered valid. Validation rules can be used to enforce data integrity, ensure compliance with business rules, and prevent errors in data entry or processing.",
      "fields": [
        {
          "name": "errorMessage",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "replacementValue",
          "type": "flex",
          "valueType": "replacementValueType"
        },
        {
          "name": "replacementValueType",
          "baseClass": "org.cote.accountmanager.model.field.FieldEnumType",
          "type": "enum",
          "maxLength": 16,
          "default": "UNKNOWN"
        },
        {
          "name": "rules",
          "baseModel": "policy.validationRule",
          "baseType": "model",
          "type": "list",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "expression",
          "type": "string",
          "maxLength": 255
        },
        {
          "name": "function",
          "type": "model",
          "baseModel": "policy.function",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.ValidationEnumType",
          "type": "enum",
          "maxLength": 16,
          "default": "UNKNOWN"
        },
        {
          "name": "comparison",
          "type": "boolean",
          "default": true
        },
        {
          "name": "comparator",
          "baseClass": "org.cote.accountmanager.schema.type.ComparatorEnumType",
          "type": "enum",
          "maxLength": 16,
          "default": "UNKNOWN"
        },
        {
          "name": "allowNull",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "identity.applicationProfile",
      "inherits": [
        "system.organizationExt"
      ],
      "ephemeral": true,
      "fields": [
        {
          "name": "jsonModelKey",
          "type": "string",
          "maxLength": 20,
          "default": "schema"
        },
        {
          "name": "systemRoles",
          "type": "list",
          "baseType": "model",
          "baseModel": "auth.role"
        },
        {
          "name": "userRoles",
          "type": "list",
          "baseType": "model",
          "baseModel": "auth.role"
        },
        {
          "name": "systemPermissions",
          "type": "list",
          "baseType": "model",
          "baseModel": "auth.permission"
        },
        {
          "name": "user",
          "type": "model",
          "baseModel": "system.user"
        },
        {
          "name": "person",
          "type": "model",
          "baseModel": "identity.person"
        }
      ]
    },
    {
      "name": "policy.function",
      "inherits": [
        "policy.baseAuthorization"
      ],
      "icon": "functions",
      "label": "Function",
      "description": "A function is a reusable piece of logic that can be applied to data or policies to perform specific actions or calculations. Functions can be used to manipulate data, enforce policies, or derive new information based on existing data.",
      "fields": [
        {
          "name": "data",
          "baseModel": "data.data",
          "type": "model",
          "foreign": true
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.FunctionEnumType",
          "type": "enum",
          "maxLength": 16
        },
        {
          "name": "class",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "sourceUrn",
          "type": "string",
          "maxLength": 127
        }
      ]
    },
    {
      "name": "data.tag",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.description",
        "common.name",
        "common.baseLight"
      ],
      "description": "A tag is a label that can be applied to objects for categorization or filtering purposes. Tags are often used to organize content in a flexible way, allowing users to find related items easily.",
      "factory": "org.cote.accountmanager.factory.DirectoryFactory",
      "group": "Tags",
      "icon": "category",
      "label": "Tag",
      "dedicatedParticipation": true,
      "constraints": [
        "name, type, groupId, organizationId"
      ],
      "query": [
        "id",
        "groupId",
        "name",
        "type"
      ],
      "sortField": "name",
      "sortOrder": "ASCENDING",
      "fields": [
        {
          "name": "type",
          "type": "string",
          "maxLength": 32
        }
      ]
    },
    {
      "name": "system.modelCategory",
      "inherits": [
        "common.nameId",
        "common.description"
      ],
      "description": "Model category for grouping models together",
      "fields": [
        {
          "name": "icon",
          "type": "string",
          "maxLength": 25
        },
        {
          "name": "order",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "limit",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "label",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "type",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "pathName",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "prototype",
          "type": "boolean"
        },
        {
          "name": "prototypes",
          "type": "list",
          "baseType": "model",
          "baseModel": "modelCategory",
          "foreign": true
        }
      ]
    },
    {
      "name": "data.note",
      "inherits": [
        "data.directory",
        "common.parent",
        "common.dateTime"
      ],
      "group": "Notes",
      "icon": "note",
      "label": "Note",
      "description": "Generic note model used to store text-based notes.",
      "vectorize": true,
      "fields": [
        {
          "name": "text",
          "type": "string"
        }
      ]
    },
    {
      "name": "message.socketMessage",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "newMessageCount",
          "type": "int"
        },
        {
          "name": "token",
          "type": "string"
        },
        {
          "name": "message",
          "baseModel": "message.spool",
          "type": "model"
        },
        {
          "name": "chirps",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "limitTest",
          "type": "list",
          "baseType": "int",
          "limit": [1, 2, 3]
        }
      ]
    },
    {
      "name": "system.fieldLock",
      "inherits": [
        "common.dateTime",
        "system.organizationExt",
        "common.reference",
        "system.primaryKey"
      ],
      "access": {
        "roles": {
          "create": [
            "AccountUsers"
          ],
          "read": [
            "AccountUsers"
          ]
        }
      },
      "description": "Lock specific model instance fields for editing.",
      "constraints": [
        "referenceId, referenceModel, fieldName, organizationId"
      ],
      "factory": "org.cote.accountmanager.factory.FieldLockFactory",
      "fields": [
        {
          "name": "fieldName",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "enabled",
          "type": "boolean"
        },
        {
          "name": "ownerId",
          "type": "long",
          "required": true,
          "private": true
        }
      ]
    },
    {
      "name": "common.alignment",
      "abstract": "true",
      "fields": [
        {
          "name": "alignment",
          "baseClass": "org.cote.accountmanager.olio.AlignmentEnumType",
          "type": "enum",
          "maxLength": 32,
          "shortName": "aln"
        }
      ]
    },
    {
      "name": "data.trait",
      "inherits": [
        "data.directory",
        "common.description",
        "common.alignment",
        "policy.score"
      ],
      "constraints": [
        "name, type, groupId, organizationId"
      ],
      "group": "Traits",
      "icon": "category",
      "label": "Trait",
      "description": "A trait is a characteristic or quality that can be associated with an object, often used to define behaviors or attributes in a flexible manner. Traits can be used to categorize objects or define specific functionalities.",
      "fields": [
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.TraitEnumType",
          "type": "enum",
          "maxLength": 32
        },
        {
          "name": "code",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "dependencies",
          "type": "list",
          "baseType": "model",
          "baseModel": "$self",
          "foreign": true,
          "followReference": false
        }
      ]
    },
    {
      "name": "data.word",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.name",
        "common.baseLight"
      ],
      "group": "Words",
      "icon": "category",
      "label": "Word",
      "description": "Represent a single word and any gender or frequency.",
      "constraints": [
        "name, gender, groupId, organizationId"
      ],
      "factory": "org.cote.accountmanager.factory.DirectoryFactory",
      "query": [
        "name",
        "gender",
        "groupId"
      ],
      "fields": [
        {
          "name": "gender",
          "type": "string",
          "maxLength": 2,
          "description": "Placeholder for gendered words"
        },
        {
          "name": "count",
          "type": "int",
          "description": "Placeholder for tracking frequency; used in wordNetModel for number of words in the synset"
        },
        {
          "name": "class",
          "type": "string",
          "maxLength": 128
        }
      ]
    },
    {
      "name": "data.wordNet",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.name",
        "common.baseLight"
      ],
      "group": "Words",
      "icon": "category",
      "label": "Word",
      "constraints": [
        "offset, name, type, groupId, organizationId"
      ],
      "factory": "org.cote.accountmanager.factory.DirectoryFactory",
      "query": [
        "name",
        "groupId"
      ],
      "description": "A word with WordNet annotations and synset.",
      "fields": [
        {
          "name": "definition",
          "type": "string",
          "maxLength": 512
        },
        {
          "name": "example",
          "type": "string",
          "maxLength": 512
        },
        {
          "name": "offset",
          "type": "string",
          "maxLength": 8,
          "description": "WordNet synset offset"
        },
        {
          "name": "lfn",
          "type": "string",
          "maxLength": 2,
          "description": "WordNet lexicographer file name"
        },
        {
          "name": "count",
          "type": "int",
          "description": "Number of words in the synset"
        },
        {
          "name": "pointerCount",
          "type": "int",
          "description": "Number of pointers from this synset to other synsets"
        },
        {
          "name": "lexId",
          "type": "int",
          "description": "Appended to lemma to identify a sense in the lexicographer file"
        },
        {
          "name": "type",
          "type": "string",
          "maxLength": 1
        },
        {
          "name": "pointers",
          "type": "list",
          "baseType": "model",
          "baseModel": "wordNetPointer"
        },
        {
          "name": "alternatives",
          "type": "list",
          "baseType": "model",
          "baseModel": "wordNetAlt"
        }
      ]
    },
    {
      "name": "data.cenWord",
      "inherits": [
        "data.word"
      ],
      "group": "Words",
      "icon": "category",
      "label": "Census Word",
      "description": "Word model used to store words such as names with corresponding census statistics.",
      "query": [
        "groupId"
      ],
      "fields": [
        {
          "name": "rank",
          "type": "int",
          "description": "Word rank"
        },
        {
          "name": "proportion",
          "type": "double",
          "description": "Proportion of the word"
        },
        {
          "name": "pctwhite",
          "type": "double",
          "description": "Percent non-Hispanic White"
        },
        {
          "name": "pcthispanic",
          "type": "double",
          "description": "Percent Hispanic or Latino"
        },
        {
          "name": "pctblack",
          "type": "double",
          "description": "Percent non-Hispanic black or African American"
        },
        {
          "name": "pctapi",
          "type": "double",
          "description": "Percent non-Hispanic Asian, Native Hawaiian, or other Pacific Islander"
        },
        {
          "name": "pctaian",
          "type": "double",
          "description": "Percent non-Hispanic American Indian or Alaska Native"
        },
        {
          "name": "pct2prace",
          "type": "double",
          "description": "Percent non-Hispanic two or more races"
        }
      ]
    },
    {
      "name": "data.wordNetPointer",
      "ioConstraints": [
        "unknown"
      ],
      "icon": "category",
      "label": "Word Pointer",
      "fields": [
        {
          "name": "offset",
          "type": "string",
          "maxLength": 8,
          "description": "WordNet synset offset"
        },
        {
          "name": "pos",
          "type": "string",
          "maxLength": 1,
          "description": "Reference to the word type"
        },
        {
          "name": "sourceTarget",
          "type": "string",
          "description": "Distinguishes lexical and semantic pointers. The first two digits indicates the word number in the current (source) synset, the last two digits indicate the word number in the target synset. A value of 0000 means that pointer_symbol represents a semantic relation between the current (source) synset and the target synset indicated by synset_offset.",
          "maxLength": 4
        }
      ]
    },
    {
      "name": "data.wordNetAlt",
      "ioConstraints": [
        "unknown"
      ],
      "icon": "category",
      "label": "Word Alternative",
      "inherits": [
        "common.name"
      ],
      "fields": [
        {
          "name": "lexId",
          "type": "int",
          "description": "Appended to lemma to identify a sense in the lexicographer file"
        }
      ]
    },
    {
      "name": "data.location",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.parent",
        "common.description",
        "common.name",
        "common.baseLight"
      ],
      "factory": "org.cote.accountmanager.factory.DirectoryFactory",
      "description": "Model used to store locations with various attributes.",
      "dedicatedParticipation": true,
      "query": [
        "name",
        "id",
        "objectId",
        "ownerId"
      ],
      "fields": [
        {
          "name": "traits",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "foreign": true
        },
        {
          "name": "boundaries",
          "baseType": "model",
          "baseModel": "$self",
          "type": "list",
          "foreign": true,
          "followReference": false,
          "participantModel": "location.boundary"
        },
        {
          "name": "borders",
          "baseType": "model",
          "baseModel": "$self",
          "type": "list",
          "foreign": true,
          "followReference": false,
          "participantModel": "location.border"
        },
        {
          "name": "childLocations",
          "baseType": "model",
          "baseModel": "$self",
          "type": "list",
          "foreign": true,
          "followReference": false,
          "participantModel": "location.child"
        },
        {
          "name": "geographyType",
          "baseClass": "org.cote.accountmanager.schema.type.GeographyEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "UNKNOWN"
        },
        {
          "name": "terrainType",
          "baseClass": "org.cote.accountmanager.schema.type.TerrainEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "UNKNOWN"
        },
        {
          "name": "classification",
          "type": "string",
          "maxLength": 128
        },
        {
          "name": "longitude",
          "type": "double"
        },
        {
          "name": "latitude",
          "type": "double"
        },
        {
          "name": "area",
          "type": "double",
          "description": "Area in square meters"
        },
        {
          "name": "elevation",
          "type": "double",
          "description": "Elevation in meters"
        },
        {
          "name": "gridZone",
          "type": "string",
          "maxLength": 3,
          "description": "Grid zone designation"
        },
        {
          "name": "kident",
          "type": "string",
          "description": "100K Identity",
          "maxLength": 3
        },
        {
          "name": "eastings",
          "type": "int",
          "description": "Meters from the western grid line"
        },
        {
          "name": "northings",
          "type": "int",
          "description": "Meters from the northern grid line"
        }
      ]
    },
    {
      "name": "data.geoLocation",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "data.location"
      ],
      "factory": "org.cote.accountmanager.factory.DirectoryFactory",
      "dedicatedParticipation": true,
      "description": "Model used to store geographical locations with various attributes.",
      "constraints": [
        "geonameid, altgeonameid, parentId, groupId, organizationId"
      ],
      "hints": [
        "geonameid, groupId",
        "parentId, groupId"
      ],
      "fields": [
        {
          "name": "altName",
          "type": "string",
          "maxLength": 256
        },
        {
          "name": "altgeonameid",
          "type": "int"
        },
        {
          "name": "code",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "geoType",
          "type": "string",
          "maxLength": 16
        },
        {
          "name": "altType",
          "type": "string",
          "maxLength": 16
        },
        {
          "name": "feature",
          "type": "string",
          "maxLength": 16
        },
        {
          "name": "iso",
          "type": "string",
          "maxLength": 8
        },
        {
          "name": "iso3",
          "type": "string",
          "maxLength": 8
        },
        {
          "name": "languages",
          "baseType": "string",
          "type": "list"
        },
        {
          "name": "neighbors",
          "baseType": "string",
          "type": "list"
        },
        {
          "name": "capital",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "continent",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "currencyCode",
          "type": "string",
          "maxLength": 4
        },
        {
          "name": "currencyName",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "postalCode",
          "type": "string",
          "maxLength": 10
        },
        {
          "name": "geonameid",
          "type": "int"
        }
      ]
    },
    {
      "name": "identity.personality",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "query": [
        "id",
        "groupId"
      ],
      "group": "Personalities",
      "icon": "category",
      "label": "Personality",
      "description": "A personality is a set of characteristics and traits that define an individual's consistent patterns of thinking, feeling, and behaving. Personalities can be assessed through various models such as the Big Five, MBTI, and Dark Tetrad.",
      "fields": [
        {
          "name": "openness",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "conscientiousness",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "extraversion",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "agreeableness",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "neuroticism",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "machiavellianism",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "narcissism",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "psychopathy",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "sadism",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "sloanKey",
          "type": "string",
          "maxLength": 5,
          "provider": "org.cote.accountmanager.olio.PersonalityProvider",
          "priority": 10
        },
        {
          "name": "sloanCardinal",
          "type": "string",
          "maxLength": 24,
          "provider": "org.cote.accountmanager.olio.PersonalityProvider",
          "priority": 10
        },
        {
          "name": "mbtiKey",
          "type": "string",
          "maxLength": 24,
          "provider": "org.cote.accountmanager.olio.PersonalityProvider",
          "priority": 15
        },
        {
          "name": "darkTetradKey",
          "type": "string",
          "maxLength": 4,
          "provider": "org.cote.accountmanager.olio.PersonalityProvider",
          "priority": 15
        }
      ]
    },
    {
      "name": "identity.socialBehavior",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight",
        "common.alignment"
      ],
      "query": [
        "id",
        "groupId"
      ],
      "group": "SocialBehaviors",
      "icon": "category",
      "label": "Social Behavior",
      "dedicatedParticipation": true,
      "description": "A social behavior is set of positive and negative traits.",
      "fields": [
        {
          "name": "positive",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "participantModel": "trait.positive",
          "foreign": true
        },
        {
          "name": "negative",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "participantModel": "trait.negative",
          "foreign": true
        }
      ]
    },
    {
      "name": "data.color",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.name",
        "common.baseLight"
      ],
      "group": "Colors",
      "icon": "palette",
      "label": "Color",
      "constraints": [
        "name, groupId, organizationId"
      ],
      "factory": "org.cote.accountmanager.factory.DirectoryFactory",
      "query": [
        "name",
        "hex",
        "groupId"
      ],
      "description": "Model used to store colors with various representations.",
      "fields": [
        {
          "name": "hex",
          "type": "string",
          "maxLength": 7,
          "description": "Hexadecimal color value"
        },
        {
          "name": "code",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "red",
          "type": "int"
        },
        {
          "name": "green",
          "type": "int"
        },
        {
          "name": "blue",
          "type": "int"
        },
        {
          "name": "hue",
          "type": "double"
        },
        {
          "name": "saturation",
          "type": "double"
        },
        {
          "name": "lightness",
          "type": "double"
        }
      ]
    },
    {
      "name": "identity.socialGroup",
      "inherits": [
        "data.directory",
        "common.description",
        "common.alignment",
        "policy.score"
      ],
      "group": "SocialGroups",
      "icon": "category",
      "label": "Social Group",
      "dedicatedParticipation": true,
      "description": "A social group is a set of positive and negative social behaviors",
      "fields": [
        {
          "name": "positive",
          "type": "list",
          "baseType": "model",
          "baseModel": "identity.socialBehavior",
          "participantModel": "behavior.positive",
          "foreign": true
        },
        {
          "name": "negative",
          "type": "list",
          "baseType": "model",
          "baseModel": "identity.socialBehavior",
          "participantModel": "behavior.negative",
          "foreign": true
        }
      ]
    },
    {
      "name": "identity.behavior",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "query": [
        "id",
        "groupId"
      ],
      "group": "Behaviors",
      "icon": "category",
      "label": "Behavior",
      "description": "A behavior is a pattern of actions or reactions of an individual or group in response to external or internal stimuli. Behaviors can be influenced by various factors including environment, genetics, and social interactions.",
      "dedicatedParticipation": true,
      "fields": [
        {
          "name": "rearing",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "education",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "indoctrination",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "herd",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "socialGroups",
          "type": "list",
          "baseType": "model",
          "baseModel": "identity.socialGroup",
          "foreign": true
        }
      ]
    },
    {
      "name": "identity.profile",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.description",
        "common.groupExt",
        "common.baseLight"
      ],
      "query": [
        "id",
        "objectId",
        "groupId",
        "portrait",
        "voice"
      ],
      "description": "A profile is a collection of shareable information about a person, such as for use in composing UX displays or generating content titles.",
      "icon": "person",
      "label": "Profile",
      "group": "Profiles",
      "dedicatedParticipation": true,
      "fields": [
        {
          "name": "album",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.data",
          "foreign": true,
          "participantModel": "profile.album"
        },
        {
          "name": "portrait",
          "type": "model",
          "baseModel": "data.data",
          "foreign": true
        },
        {
          "name": "voice",
          "type": "model",
          "baseModel": "identity.voice",
          "foreign": true
        },
        {
          "name": "contentTitle",
          "type": "string",
          "maxLength": 128
        },
        {
          "name": "contentSubTitle",
          "type": "string",
          "maxLength": 128
        },
        {
          "name": "pseudonym",
          "type": "string",
          "maxLength": 128
        }
      ]
    },
    {
      "name": "common.vectorExt",
      "inherits": [
        "crypto.vaultExt"
      ],
      "abstract": true,
      "query": [],
      "fields": [
        {
          "name": "chunk",
          "type": "int"
        },
        {
          "name": "chunkCount",
          "type": "int"
        },
        {
          "name": "content",
          "type": "string",
          "provider": "org.cote.accountmanager.provider.EncryptFieldProvider",
          "encrypt": false
        },
        {
          "name": "embedding",
          "type": "vector",
          "maxLength": 768
        }
      ]
    },
    {
      "name": "data.vectorModelStore",
      "inherits": [
        "common.objectId",
        "common.dateTime",
        "common.vectorExt",
        "system.organizationExt",
        "system.primaryKey"
      ],
      "query": [
        "vectorReference",
        "vectorReferenceType",
        "chunk",
        "chunkCount"
      ],
      "hints": [
        "vectorReference, vectorReferenceType"
      ],
      "description": "A model store for embedding vectors for use with retrieval-augmented generation (RAG).",
      "fields": [
        {
          "name": "vectorReference",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "vectorReferenceType",
          "access": {
            "roles": {
              "read": [
                "AccountUsers"
              ]
            }
          }
        },
        {
          "name": "vectorReferenceType",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "score",
          "type": "double",
          "ephemeral": true
        }
      ]
    },
    {
      "name": "data.vectorList",
      "ephemeral": true,
      "factory": "org.cote.accountmanager.factory.VectorListFactory",
      "fields": [
        {
          "name": "vectors",
          "baseType": "model",
          "baseModel": "data.vectorModelStore",
          "type": "list"
        }
      ]
    },
    {
      "name": "data.vectorChunk",
      "ioConstraints": [
        "unknown"
      ],
      "inherits": [],
      "query": [],
      "fields": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "chapter",
          "type": "int"
        },
        {
          "name": "chapterTitle",
          "type": "string"
        },
        {
          "name": "path",
          "type": "string"
        },
        {
          "name": "chunk",
          "type": "int"
        },
        {
          "name": "chunkCount",
          "type": "int"
        },
        {
          "name": "content",
          "type": "string"
        }
      ]
    },
    {
      "name": "system.taskRequest",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.SystemTaskEnumType",
          "type": "enum",
          "maxLength": 10,
          "default": "UNKNOWN"
        },
        {
          "name": "taskModel",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "taskModelType",
          "access": {
            "roles": {
              "read": [
                "ApiUsers"
              ]
            }
          }
        },
        {
          "name": "taskModelData",
          "type": "string"
        },
        {
          "name": "taskModelType",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "data",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "dataType",
          "access": {
            "roles": {
              "read": [
                "ApiUsers"
              ]
            }
          }
        },
        {
          "name": "dataType",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "payload",
          "type": "blob"
        }
      ]
    },
    {
      "name": "system.taskResponse",
      "inherits": [
        "system.taskRequest"
      ],
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "responseType",
          "baseClass": "org.cote.accountmanager.schema.type.ResponseEnumType",
          "type": "enum",
          "maxLength": 10,
          "default": "UNKNOWN"
        }
      ]
    },
    {
      "name": "tool.plan",
      "ioConstraints": [
        "undefined"
      ],
      "fields": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "planQuery",
          "type": "string"
        },
        {
          "name": "planPromptConfigName",
          "type": "string"
        },
        {
          "name": "planChatName",
          "type": "string"
        },
        {
          "name": "executed",
          "type": "boolean",
          "default": false
        },
        {
          "name": "steps",
          "type": "list",
          "baseType": "model",
          "baseModel": "tool.planStep"
        },
        {
          "name": "output",
          "type": "model",
          "baseModel": "dev.parameter"
        }
      ]
    },
    {
      "name": "tool.planStep",
      "ioConstraints": [
        "undefined"
      ],
      "inherits": [
        "common.description"
      ],
      "fields": [
        {
          "name": "toolName",
          "type": "string"
        },
        {
          "name": "step",
          "type": "int",
          "default": 0
        },
        {
          "name": "stepPromptConfigName",
          "type": "string"
        },
        {
          "name": "stepChatName",
          "type": "string"
        },
        {
          "name": "inputs",
          "type": "list",
          "baseType": "model",
          "baseModel": "dev.parameter"
        },
        {
          "name": "output",
          "type": "model",
          "baseModel": "dev.parameter"
        }
      ]
    },
    {
      "name": "identity.voice",
      "inherits": [
        "data.directory",
        "identity.contactInformationExt"
      ],
      "icon": "volume_up",
      "label": "Voice",
      "group": "Voices",
      "description": "Voice configuration information",
      "fields": [
        {
          "name": "engine",
          "type": "string",
          "default": "xtts",
          "limit": [
            "piper",
            "xtts"
          ]
        },
        {
          "name": "speakerId",
          "type": "int",
          "default": -1
        },
        {
          "name": "voiceSample",
          "type": "model",
          "baseModel": "data.data",
          "foreign": true
        },
        {
          "name": "speaker",
          "type": "string",
          "default": "Unknown",
          "limit": [
            "Unknown",
            "en_GB-alba-medium"
          ]
        },
        {
          "name": "speed",
          "type": "double",
          "minValue": 0.1,
          "maxValue": 4,
          "default": 1.3
        }
      ]
    },
    {
      "name": "olio.charPerson",
      "inherits": [
        "identity.person",
        "common.alignment"
      ],
      "group": "Characters",
      "icon": "face",
      "label": "Character Person",
      "dedicatedParticipation": true,
      "factory": "org.cote.accountmanager.olio.CharPersonFactory",
      "vector": "org.cote.accountmanager.olio.VectorProvider",
      "query": [
        "profile"
      ],
      "description": "A character person is a specific type of person that has attributes such as appearance, traits, and statistics. They can be involved in various interactions and actions within the system, and they may have specific roles or functions.",
      "fields": [
        {
          "name": "eyeColor",
          "type": "model",
          "baseModel": "data.color",
          "foreign": true
        },
        {
          "name": "hairColor",
          "type": "model",
          "baseModel": "data.color",
          "foreign": true
        },
        {
          "name": "hairStyle",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "trades",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "traits",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "foreign": true,
          "participantModel": "person.trait"
        },
        {
          "name": "store",
          "type": "model",
          "baseModel": "olio.store",
          "foreign": true,
          "participantModel": "person.store",
          "shortName": "sto"
        },
        {
          "name": "statistics",
          "type": "model",
          "baseModel": "olio.statistics",
          "foreign": true,
          "shortName": "sta"
        },
        {
          "name": "instinct",
          "type": "model",
          "baseModel": "olio.instinct",
          "foreign": true,
          "shortName": "inst"
        },
        {
          "name": "narrative",
          "type": "model",
          "baseModel": "olio.narrative",
          "foreign": true
        },
        {
          "name": "state",
          "type": "model",
          "baseModel": "olio.state",
          "foreign": true,
          "shortName": "st"
        }
      ]
    },
    {
      "name": "olio.instinct",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "Instincts",
      "icon": "category",
      "description": "Instincts are innate behaviors or tendencies that guide the actions and reactions of characters or entities in the Olio universe. They can influence various aspects of behavior, such as survival, social interaction, and emotional responses.",
      "label": "Instinct",
      "fields": [
        {
          "name": "sleep",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "fight",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "flight",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "hide",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "feed",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "drink",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "mate",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "herd",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "hygiene",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "cooperate",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "resist",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "adapt",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "laugh",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "cry",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        },
        {
          "name": "protect",
          "type": "double",
          "minValue": -100,
          "maxValue": 100,
          "validateRange": true
        }
      ]
    },
    {
      "name": "olio.quality",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "Qualities",
      "icon": "category",
      "label": "Quality",
      "query": [
        "id",
        "groupId"
      ],
      "description": "This model represents the quality attributes of an item, including physical properties, adjustments, and various quality metrics. It is used to define how items behave in terms of their physical characteristics and performance in the game world.",
      "fields": [
        {
          "name": "unit",
          "type": "string",
          "maxLength": 6,
          "default": "us",
          "description": "Default for US: dimensions in inches, weight in pounds"
        },
        {
          "name": "valueAdjustment",
          "type": "double"
        },
        {
          "name": "width",
          "type": "double"
        },
        {
          "name": "height",
          "type": "double"
        },
        {
          "name": "weight",
          "type": "double"
        },
        {
          "name": "length",
          "type": "double"
        },
        {
          "name": "opacity",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "elasticity",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "glossiness",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "viscocity",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "sliminess",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "range",
          "type": "int",
          "minValue": 0,
          "maxValue": 100000,
          "validateRange": true
        },
        {
          "name": "smoothness",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "hardness",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "toughness",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "defensive",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "offensive",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "waterresistance",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "heatresistance",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "insulation",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true
        },
        {
          "name": "skill",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true,
          "description": "Skillfulness needed for full quality application"
        }
      ]
    },
    {
      "name": "olio.qualityExt",
      "abstract": true,
      "fields": [
        {
          "name": "quality",
          "type": "int",
          "minValue": 0,
          "maxValue": 100,
          "default": 100,
          "validateRange": true
        },
        {
          "name": "qualities",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.quality",
          "foreign": true
        }
      ]
    },
    {
      "name": "olio.priceExt",
      "abstract": true,
      "fields": [
        {
          "name": "retailValue",
          "type": "double"
        },
        {
          "name": "resaleAdjustment",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true,
          "default": 0.5
        },
        {
          "name": "value",
          "type": "double",
          "minValue": 0,
          "validateRange": true
        }
      ]
    },
    {
      "name": "olio.item",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.name",
        "common.groupExt",
        "data.tagsExt",
        "common.baseLight",
        "common.description",
        "olio.qualityExt",
        "olio.priceExt"
      ],
      "group": "Items",
      "icon": "category",
      "label": "Item",
      "query": [
        "id",
        "groupId",
        "name"
      ],
      "dedicatedParticipation": true,
      "description": "An item is a physical object that can be used, traded, or interacted with in various ways. Items can have specific types, categories, and attributes that define their characteristics and uses. They may also include patterns, colors, and other traits that enhance their functionality or aesthetics.",
      "fields": [
        {
          "name": "type",
          "type": "string",
          "maxLength": 24
        },
        {
          "name": "category",
          "type": "string",
          "maxLength": 24,
          "shortName": "cat"
        },
        {
          "name": "quantity",
          "type": "int",
          "shortName": "quan"
        },
        {
          "name": "pattern",
          "baseModel": "data.data",
          "type": "model",
          "foreign": true
        },
        {
          "name": "color",
          "type": "model",
          "baseModel": "data.color",
          "foreign": true
        },
        {
          "name": "complementColor",
          "type": "model",
          "baseModel": "data.color",
          "foreign": true
        },
        {
          "name": "accentColor",
          "type": "model",
          "baseModel": "data.color",
          "foreign": true
        },
        {
          "name": "age",
          "type": "int"
        },
        {
          "name": "inuse",
          "type": "boolean"
        },
        {
          "name": "materials",
          "type": "list",
          "baseType": "string",
          "shortName": "mat"
        },
        {
          "name": "perks",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "participantModel": "trait.perk",
          "foreign": true,
          "shortName": "pks"
        },
        {
          "name": "features",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "participantModel": "trait.feature",
          "foreign": true,
          "shortName": "feat"
        },
        {
          "name": "statistics",
          "type": "model",
          "baseModel": "olio.itemStatistics",
          "foreign": true,
          "shortName": "stat"
        }
      ]
    },
    {
      "name": "olio.wearable",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "olio.item"
      ],
      "group": "Wearables",
      "icon": "apparel",
      "label": "Wearable",
      "dedicatedParticipation": true,
      "description": "An article of clothing, including layer and placement.",
      "fields": [
        {
          "name": "gender",
          "type": "string",
          "maxLength": 6,
          "description": "Male, female, unisex"
        },
        {
          "name": "fabric",
          "type": "string",
          "maxLength": 24
        },
        {
          "name": "attachment",
          "type": "string",
          "maxLength": 16,
          "description": "Worn, carried, etc"
        },
        {
          "name": "size",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "level",
          "baseClass": "org.cote.accountmanager.olio.WearLevelEnumType",
          "type": "enum",
          "maxLength": 16,
          "default": "NONE"
        },
        {
          "name": "location",
          "type": "list",
          "baseType": "string",
          "limit": [
            "head",
            "brow",
            "hair",
            "back",
            "torso",
            "chest",
            "breast",
            "foot",
            "toe",
            "ankle",
            "thigh",
            "leg",
            "shin",
            "wrist",
            "hand",
            "finger",
            "arm",
            "forearm",
            "neck",
            "groin",
            "shoulder",
            "bicep",
            "tricep",
            "upper arm",
            "knee",
            "elbow",
            "face",
            "nose",
            "ear",
            "eye",
            "hip",
            "waist",
            "belly",
            "lip"
          ]
        }
      ]
    },
    {
      "name": "olio.apparel",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.name",
        "common.groupExt",
        "common.description",
        "common.baseLight"
      ],
      "group": "Apparel",
      "icon": "styler",
      "label": "Apparel",
      "query": [
        "id",
        "groupId",
        "name"
      ],
      "dedicatedParticipation": true,
      "description": "Apparel is a set of wearable items designed to be worn by characters or entities. It can include various types of clothing, accessories, and other wearable items that enhance the appearance or functionality of the wearer.",
      "fields": [
        {
          "name": "type",
          "type": "string",
          "description": "The type this apparel is supposed to represent, such as a suit, casual outfit, etc"
        },
        {
          "name": "category",
          "type": "string",
          "maxLength": 24,
          "shortName": "cat"
        },
        {
          "name": "gender",
          "type": "string",
          "maxLength": 6,
          "description": "Male, female, unisex"
        },
        {
          "name": "designer",
          "type": "model",
          "baseModel": "olio.charPerson",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "manufacturer",
          "type": "string",
          "maxLength": 127
        },
        {
          "name": "wearables",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.wearable",
          "foreign": true
        },
        {
          "name": "inuse",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "olio.event",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.parent",
        "common.description",
        "common.name",
        "common.baseLight",
        "common.alignment"
      ],
      "factory": "org.cote.accountmanager.factory.DirectoryFactory",
      "group": "Olio Events",
      "icon": "category",
      "label": "Olio Event",
      "dedicatedParticipation": true,
      "constraints": [
        "name, parentId, groupId, organizationId"
      ],
      "query": [
        "name",
        "id",
        "objectId",
        "ownerId",
        "parentId",
        "type",
        "state"
      ],
      "description": "An event is a significant occurrence or happening within the Olio universe, which can involve various entities, interactions, and states. Events can have multiple participants, actors, and observers, and they may be influenced by various factors such as location, time, and preceding or subsequent events.",
      "fields": [
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.EventEnumType",
          "type": "enum",
          "maxLength": 32
        },
        {
          "name": "timeType",
          "baseClass": "org.cote.accountmanager.schema.type.TimeEnumType",
          "type": "enum",
          "maxLength": 32,
          "shortName": "tt"
        },
        {
          "name": "state",
          "baseClass": "org.cote.accountmanager.schema.type.ActionResultEnumType",
          "type": "enum",
          "maxLength": 32,
          "shortName": "st"
        },
        {
          "name": "entryTraits",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "foreign": true,
          "participantModel": "event.entryTrait",
          "shortName": "et"
        },
        {
          "name": "exitTraits",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "foreign": true,
          "participantModel": "event.exitTrait",
          "shortName": "xt"
        },
        {
          "name": "actors",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.charPerson",
          "foreign": true,
          "participantModel": "event.actor",
          "shortName": "as"
        },
        {
          "name": "participants",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.charPerson",
          "foreign": true,
          "participantModel": "event.participant",
          "shortName": "ps"
        },
        {
          "name": "observers",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.charPerson",
          "foreign": true,
          "participantModel": "event.observer",
          "shortName": "os"
        },
        {
          "name": "influencers",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.charPerson",
          "foreign": true,
          "participantModel": "event.influencer",
          "shortName": "is"
        },
        {
          "name": "location",
          "type": "model",
          "baseModel": "data.geoLocation",
          "foreign": true,
          "shortName": "loc"
        },
        {
          "name": "realm",
          "type": "model",
          "baseModel": "olio.realm",
          "foreign": true,
          "followReference": false,
          "shortName": "rea"
        },
        {
          "name": "interactions",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.interaction",
          "foreign": true,
          "participantModel": "actionResult.interaction",
          "shortName": "ias"
        },
        {
          "name": "eventStart",
          "type": "zonetime",
          "shortName": "es"
        },
        {
          "name": "eventProgress",
          "type": "zonetime",
          "shortName": "ep"
        },
        {
          "name": "inProgress",
          "type": "boolean",
          "shortName": "ip"
        },
        {
          "name": "eventEnd",
          "type": "zonetime",
          "shortName": "ee"
        },
        {
          "name": "precedingEvents",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.event",
          "foreign": true,
          "participantModel": "event.preceding",
          "shortName": "pe"
        },
        {
          "name": "subsequentEvents",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.event",
          "foreign": true,
          "participantModel": "event.subsequent",
          "shortName": "se"
        },
        {
          "name": "behavior",
          "type": "model",
          "baseModel": "identity.behavior",
          "foreign": true,
          "shortName": "be"
        },
        {
          "name": "instinct",
          "type": "model",
          "baseModel": "olio.instinct",
          "foreign": true,
          "shortName": "inst"
        },
        {
          "name": "groups",
          "type": "list",
          "baseType": "model",
          "baseModel": "auth.group",
          "foreign": true,
          "participantModel": "event.group",
          "shortName": "gps"
        },
        {
          "name": "actions",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.actionResult",
          "foreign": true,
          "participantModel": "action.result",
          "shortName": "acts"
        },
        {
          "name": "epoch",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "olio.statistics",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "Statistics",
      "icon": "category",
      "label": "Character Statistics",
      "query": [
        "id",
        "groupId"
      ],
      "description": "This model represents the statistical attributes of a character in a realm, including physical and mental attributes, derived statistics, and overall potential. It is used to define how characters perform in various aspects of the game world.",
      "fields": [
        {
          "name": "physicalStrength",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "physicalEndurance",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "manualDexterity",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "agility",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "speed",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "mentalStrength",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "mentalEndurance",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "intelligence",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "wisdom",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "perception",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "creativity",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "spirituality",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "description": "Potential for both worldy and otherworldly empathy and awareness"
        },
        {
          "name": "charisma",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "luck",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "athleticism",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "physicalStrength",
            "physicalEndurance",
            "agility",
            "speed",
            "mentalEndurance"
          ],
          "description": "Overall fitness and prowess",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 30
        },
        {
          "name": "magic",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "willpower",
            "wisdom",
            "creativity",
            "spirituality"
          ],
          "description": "Potential for otherworldly perceptions and manipulations",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 30
        },
        {
          "name": "science",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "intelligence",
            "wisdom",
            "creativity"
          ],
          "description": "Propensity to innovate/discover/understand fundamental natural elements",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 30
        },
        {
          "name": "willpower",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "mentalEndurance",
            "mentalStrength"
          ],
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 1
        },
        {
          "name": "reaction",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "agility",
            "speed",
            "wisdom",
            "perception"
          ],
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 1
        },
        {
          "name": "save",
          "type": "double",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "PERC20",
          "fields": [
            "physicalStrength",
            "physicalEndurance",
            "mentalStrength",
            "mentalEndurance",
            "charisma"
          ],
          "minValue": 0,
          "maxValue": 1,
          "validateRange": true,
          "priority": 20
        },
        {
          "name": "potential",
          "type": "int",
          "minValue": 0,
          "maxValue": 150,
          "description": "Available attribute points",
          "validateRange": true
        },
        {
          "name": "health",
          "type": "int",
          "minValue": -1,
          "maxValue": 20,
          "default": -1,
          "description": "Note: This is duplicated with state.health because it's tied to the save calculation",
          "validateRange": true
        },
        {
          "name": "maximumHealth",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "physicalStrength",
            "physicalEndurance",
            "mentalStrength",
            "mentalEndurance",
            "charisma"
          ],
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 10
        },
        {
          "name": "physicalAppearance",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "physicalStrength",
            "agility",
            "maximumHealth"
          ],
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 15
        },
        {
          "name": "mentalHealth",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "willpower",
            "spirituality"
          ],
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 15
        },
        {
          "name": "wit",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "intelligence",
            "creativity"
          ],
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 15
        },
        {
          "name": "charm",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "charisma",
            "wit"
          ],
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 20
        },
        {
          "name": "beauty",
          "type": "int",
          "virtual": true,
          "provider": "org.cote.accountmanager.provider.ComputeProvider",
          "compute": "AVG",
          "fields": [
            "physicalAppearance",
            "charm",
            "manualDexterity",
            "mentalHealth",
            "perception"
          ],
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "priority": 25
        }
      ]
    },
    {
      "name": "olio.state",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "States",
      "icon": "category",
      "label": "State",
      "dedicatedParticipation": true,
      "query": [
        "groupId",
        "organizationId"
      ],
      "description": "This model represents the state of an entity in a realm, including its current event, location, actions, and various status flags. It is used to track the condition and activities of entities such as players or NPCs within the game world.",
      "fields": [
        {
          "name": "currentEvent",
          "type": "model",
          "baseModel": "olio.event",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "currentLocation",
          "type": "model",
          "baseModel": "data.geoLocation",
          "foreign": true,
          "followReference": true
        },
        {
          "name": "actions",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.actionResult",
          "foreign": true
        },
        {
          "name": "alive",
          "type": "boolean",
          "default": true
        },
        {
          "name": "awake",
          "type": "boolean",
          "default": true
        },
        {
          "name": "agitated",
          "type": "boolean",
          "description": "Bit indicating that the state was intentionally agitated"
        },
        {
          "name": "immobilized",
          "type": "boolean"
        },
        {
          "name": "incapacitated",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "currentEast",
          "type": "int",
          "description": "Meters from the western grid line of the currentLocation",
          "default": -1
        },
        {
          "name": "currentNorth",
          "type": "int",
          "description": "Meters from the northern grid line of the currentLocation",
          "default": -1
        },
        {
          "name": "health",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "description": "Percentage of health remaining",
          "validateRange": true
        },
        {
          "name": "energy",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "description": "Percentage of energy remaining",
          "validateRange": true
        },
        {
          "name": "schedules",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.schedule",
          "participantModel": "state.schedule",
          "foreign": true
        }
      ]
    },
    {
      "name": "olio.action",
      "inherits": [
        "data.directory",
        "common.description",
        "common.alignment"
      ],
      "group": "Actions",
      "icon": "category",
      "label": "Action",
      "description": "An action that can be performed by a character or entity, which may have various effects on their attributes, skills, and states.",
      "fields": [
        {
          "name": "provider",
          "type": "string",
          "description": "Class or script name used to perform a discrete execution of the action"
        },
        {
          "name": "difficulty",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true,
          "shortName": "hard"
        },
        {
          "name": "minimumTime",
          "type": "int",
          "minValue": -1,
          "description": "Minimum amount of seconds required to perform the action",
          "shortName": "mint"
        },
        {
          "name": "maximumTime",
          "type": "int",
          "minValue": -1,
          "description": "Maximum amount of seconds to perform the action before becoming counter-productive or futile",
          "shortName": "maxt"
        },
        {
          "name": "minimumEnergyCost",
          "type": "double",
          "minValue": 0,
          "maxValue": 1,
          "description": "Minimum amount of energy required to perform the action, expressed as a percentage of maximum available energy",
          "validateRange": true,
          "shortName": "mine"
        },
        {
          "name": "positiveStatistics",
          "type": "list",
          "baseType": "string",
          "limit": [
            "physicalStrength",
            "physicalEndurance",
            "manualDexterity",
            "agility",
            "speed",
            "mentalStrength",
            "mentalEndurance",
            "intelligence",
            "wisdom",
            "charisma",
            "creativity",
            "spirituality",
            "science",
            "reaction",
            "save",
            "magic",
            "maximumHealth"
          ],
          "shortName": "psta"
        },
        {
          "name": "negativeStatistics",
          "type": "list",
          "baseType": "string",
          "limit": [
            "physicalStrength",
            "physicalEndurance",
            "manualDexterity",
            "agility",
            "speed",
            "mentalStrength",
            "mentalEndurance",
            "intelligence",
            "wisdom",
            "charisma",
            "creativity",
            "spirituality",
            "science",
            "reaction",
            "save",
            "magic",
            "maximumHealth"
          ],
          "shortName": "nsta"
        },
        {
          "name": "positivePersonality",
          "type": "list",
          "baseType": "string",
          "limit": [
            "open",
            "conscientious",
            "extraverted",
            "agreeable",
            "neurotic"
          ],
          "shortName": "pper"
        },
        {
          "name": "negativePersonality",
          "type": "list",
          "baseType": "string",
          "limit": [
            "open",
            "conscientious",
            "extraverted",
            "agreeable",
            "neurotic"
          ],
          "shortName": "nper"
        },
        {
          "name": "positiveStates",
          "type": "list",
          "baseType": "string",
          "limit": [
            "health",
            "energy"
          ],
          "shortName": "pst"
        },
        {
          "name": "negativeStates",
          "type": "list",
          "baseType": "string",
          "limit": [
            "health",
            "energy"
          ],
          "shortName": "nst"
        },
        {
          "name": "positiveInstincts",
          "type": "list",
          "baseType": "string",
          "limit": [
            "sleep",
            "fight",
            "flight",
            "feed",
            "drink",
            "mate",
            "herd",
            "hygiene",
            "cooperate",
            "resist",
            "adapt",
            "laugh",
            "cry",
            "protect"
          ],
          "shortName": "pi"
        },
        {
          "name": "negativeInstincts",
          "type": "list",
          "baseType": "string",
          "limit": [
            "sleep",
            "fight",
            "flight",
            "feed",
            "drink",
            "mate",
            "herd",
            "hygiene",
            "cooperate",
            "resist",
            "adapt",
            "laugh",
            "cry",
            "protect"
          ],
          "shortName": "ni"
        },
        {
          "name": "counterActions",
          "type": "list",
          "baseType": "string",
          "shortName": "ca"
        },
        {
          "name": "requiredSkills",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "foreign": true,
          "shortName": "rs"
        }
      ]
    },
    {
      "name": "olio.actionResult",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight",
        "common.alignment"
      ],
      "group": "Action Results",
      "icon": "category",
      "label": "Action Result",
      "query": [
        "id",
        "groupId"
      ],
      "dedicatedParticipation": true,
      "description": "An action result is a record of the outcome of an action performed by an actor, which may include various attributes, statistics, and states that are affected by the action. It can also include interactions with other entities and dependent actions.",
      "fields": [
        {
          "name": "action",
          "type": "model",
          "baseModel": "olio.action",
          "foreign": true
        },
        {
          "name": "builder",
          "type": "model",
          "baseModel": "olio.builder",
          "foreign": true
        },
        {
          "name": "counterAction",
          "type": "model",
          "baseModel": "olio.action",
          "foreign": true
        },
        {
          "name": "parameters",
          "type": "model",
          "baseModel": "olio.actionParameters",
          "followReference": false
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.schema.type.ActionResultEnumType",
          "type": "enum",
          "maxLength": 32
        },
        {
          "name": "actorType",
          "type": "string",
          "maxLength": 32,
          "shortName": "actt"
        },
        {
          "name": "actor",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "actorType",
          "shortName": "act"
        },
        {
          "name": "delegateType",
          "type": "string",
          "maxLength": 32,
          "shortName": "delt"
        },
        {
          "name": "delegate",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "delegateType",
          "shortName": "del"
        },
        {
          "name": "outcome",
          "baseClass": "org.cote.accountmanager.olio.OutcomeEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "equilibrium",
          "shortName": "out"
        },
        {
          "name": "need",
          "type": "string",
          "maxLength": 32,
          "description": "Placeholder for the name of a need the action satisfies"
        },
        {
          "name": "needType",
          "baseClass": "org.cote.accountmanager.olio.AssessmentEnumType",
          "type": "enum",
          "maxLength": 32,
          "description": "Placeholder for the type need the action satisfies"
        },
        {
          "name": "store",
          "type": "model",
          "baseModel": "olio.store",
          "foreign": true
        },
        {
          "name": "actionStart",
          "type": "zonetime"
        },
        {
          "name": "actionProgress",
          "type": "zonetime"
        },
        {
          "name": "actionEnd",
          "type": "zonetime"
        },
        {
          "name": "statistics",
          "type": "model",
          "baseModel": "olio.statistics",
          "description": "Statistics modifiers from this action",
          "foreign": true
        },
        {
          "name": "state",
          "type": "model",
          "baseModel": "olio.state",
          "description": "State modifiers from this action",
          "foreign": true
        },
        {
          "name": "instinct",
          "type": "model",
          "baseModel": "olio.instinct",
          "description": "Instinct modifiers from this action",
          "foreign": true
        },
        {
          "name": "personality",
          "type": "model",
          "baseModel": "identity.personality",
          "description": "Personality modifiers from this action",
          "foreign": true
        },
        {
          "name": "dependentActions",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.actionResult",
          "foreign": true,
          "followReference": false,
          "participantModel": "actionResult.actionResult",
          "shortName": "das"
        },
        {
          "name": "interactions",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.interaction",
          "foreign": true,
          "participantModel": "actionResult.interaction",
          "shortName": "ias"
        },
        {
          "name": "results",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "trace",
          "type": "list",
          "baseType": "string"
        }
      ]
    },
    {
      "name": "olio.actionParameters",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "actionName",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "itemName",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "itemCategory",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "itemModel",
          "type": "string",
          "maxLength": 64,
          "default": "olio.item"
        },
        {
          "name": "direction",
          "baseClass": "org.cote.accountmanager.olio.DirectionEnumType",
          "type": "enum",
          "maxLength": 32
        },
        {
          "name": "wearLevel",
          "baseClass": "org.cote.accountmanager.olio.WearLevelEnumType",
          "type": "enum",
          "maxLength": 32
        },
        {
          "name": "narrate",
          "type": "boolean"
        },
        {
          "name": "autoComplete",
          "type": "boolean",
          "description": "In an action is interrupted for some reason, and then the same action attempted again, setting autoComplete to true will conclude the incomplete action.  Otherwise, if false the new action won't start until the prior action is completed."
        },
        {
          "name": "duration",
          "type": "int",
          "default": 0,
          "description": "Number of seconds to perform a timed action."
        },
        {
          "name": "quantity",
          "type": "int",
          "default": 0,
          "description": "Placeholder of quantity to be used in conduct of the action."
        },
        {
          "name": "distance",
          "type": "double",
          "default": 0
        },
        {
          "name": "needName",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "needType",
          "baseClass": "org.cote.accountmanager.olio.AssessmentEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "UNKNOWN"
        }
      ]
    },
    {
      "name": "olio.schedule",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight",
        "common.reference"
      ],
      "group": "Schedules",
      "icon": "category",
      "label": "Schedule",
      "dedicatedParticipation": true,
      "description": "This model represents a schedule for recurring events or actions within a realm. It includes details about the schedule's timing, recurrence, and associated actions. Schedules can be used to automate tasks or manage events that occur at specific times or intervals.",
      "fields": [
        {
          "name": "beginDate",
          "type": "timestamp"
        },
        {
          "name": "endDate",
          "type": "timestamp"
        },
        {
          "name": "completedDate",
          "type": "timestamp",
          "description": "Time when the schedule was last completed"
        },
        {
          "name": "reoccurs",
          "type": "boolean"
        },
        {
          "name": "reoccurence",
          "baseClass": "org.cote.accountmanager.schema.type.TimeEnumType",
          "type": "enum",
          "maxLength": 32
        },
        {
          "name": "reoccurenceInterval",
          "type": "int",
          "maxLength": 32
        },
        {
          "name": "dayOfWeek",
          "type": "int",
          "minValue": 0,
          "maxValue": 7,
          "description": "For reoccuring - Day of the week the schedule applies",
          "validateRange": true
        },
        {
          "name": "secondOfDay",
          "type": "int",
          "minValue": 0,
          "maxValue": 86400,
          "description": "For reoccuring - Second of the day the schedule applies",
          "validateRange": true
        },
        {
          "name": "duration",
          "type": "int",
          "minValue": -1,
          "description": "For reoccuring - number of seconds the schedule lasts",
          "validateRange": true
        },
        {
          "name": "schedules",
          "baseType": "model",
          "baseModel": "$self",
          "type": "list",
          "foreign": true,
          "followReference": false,
          "participantModel": "schedule.child"
        },
        {
          "name": "actions",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.action",
          "foreign": true
        }
      ]
    },
    {
      "name": "olio.inventoryEntry",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "Inventory Entries",
      "icon": "category",
      "label": "Inventory Entry",
      "dedicatedParticipation": true,
      "description": "An inventory entry represents a specific item or apparel in the inventory system. It includes details such as quantity, age, usage status, and the associated item or apparel model.",
      "fields": [
        {
          "name": "quantity",
          "type": "int",
          "shortName": "quan"
        },
        {
          "name": "age",
          "type": "int"
        },
        {
          "name": "inuse",
          "type": "boolean"
        },
        {
          "name": "item",
          "type": "model",
          "baseModel": "olio.item",
          "foreign": true
        },
        {
          "name": "apparel",
          "type": "model",
          "baseModel": "olio.apparel",
          "foreign": true
        }
      ]
    },
    {
      "name": "olio.store",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "Stores",
      "icon": "category",
      "label": "Store",
      "dedicatedParticipation": true,
      "sortField": "name",
      "sortOrder": "ASCENDING",
      "description": "This model represents a store in a realm, which can be a physical or virtual place where items, apparel, and other goods are sold or stored. It includes details about the store's name, inventory, items, apparel, and locations associated with the store.",
      "fields": [
        {
          "name": "name",
          "type": "string",
          "maxLength": 128
        },
        {
          "name": "inventory",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.inventoryEntry",
          "foreign": true,
          "participantModel": "store.entry",
          "description": "Inventory is meant to hold item references, particularly renewable or consumable items versus continually used items.  For example, an item in a merchant's or manufacturer's inventory entry versus an item that someone owns, and makes use of. At present, it is an abstract duplicate of what may be in the items or apparel or wearable lists, and may ultimately replace those."
        },
        {
          "name": "items",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.item",
          "foreign": true,
          "participantModel": "store.item",
          "followReference": false
        },
        {
          "name": "apparel",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.apparel",
          "foreign": true,
          "participantModel": "store.apparel"
        },
        {
          "name": "locations",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.geoLocation",
          "foreign": true,
          "participantModel": "store.location",
          "description": "Locations that belong to this store - eg: locations a person owns, etc"
        }
      ]
    },
    {
      "name": "olio.builder",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.name",
        "common.groupExt",
        "data.tagsExt",
        "common.baseLight",
        "common.description",
        "olio.qualityExt",
        "olio.priceExt"
      ],
      "group": "Builders",
      "icon": "category",
      "label": "Builder",
      "query": [
        "id",
        "groupId",
        "name",
        "tags"
      ],
      "dedicatedParticipation": true,
      "description": "A builder is an entity that can create or produce items, apparel, or other objects using various materials and skills. Builders can have specific types, schedules, and renewable capabilities, and they may require certain materials and skills to perform their tasks.",
      "fields": [
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.olio.BuilderEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "unknown"
        },
        {
          "name": "time",
          "type": "int",
          "description": "Time in minutes to build this object with mean skill level"
        },
        {
          "name": "schedule",
          "type": "model",
          "baseModel": "olio.schedule",
          "foreign": true,
          "participantModel": "buildable.schedule",
          "description": "Schedule to use for reoccuring builders",
          "shortName": "sch"
        },
        {
          "name": "store",
          "type": "model",
          "baseModel": "olio.store",
          "foreign": true,
          "participantModel": "buildable.store",
          "description": "Store where a produced item will be placed",
          "shortName": "sto"
        },
        {
          "name": "renewable",
          "type": "boolean",
          "shortName": "ren"
        },
        {
          "name": "materials",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.item",
          "participantModel": "builder.material",
          "foreign": true,
          "shortName": "mat"
        },
        {
          "name": "apparel",
          "type": "model",
          "baseModel": "olio.apparel",
          "description": "Templates to use when building out apparel/wearables",
          "foreign": true,
          "shortName": "app"
        },
        {
          "name": "item",
          "type": "model",
          "baseModel": "olio.item",
          "description": "Templates to use when building out items",
          "foreign": true
        },
        {
          "name": "skills",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.builder",
          "participantModel": "builder.builder",
          "foreign": true,
          "shortName": "sk"
        },
        {
          "name": "perks",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "participantModel": "builder.perk",
          "foreign": true,
          "shortName": "pks"
        },
        {
          "name": "features",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "participantModel": "builder.feature",
          "foreign": true,
          "shortName": "feat"
        },
        {
          "name": "terrain",
          "type": "list",
          "baseType": "string",
          "description": "Terrain limitations for a particular build.  E.G.: Can't build an igloo in a desert"
        }
      ]
    },
    {
      "name": "olio.itemStatistics",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "Statistics",
      "icon": "category",
      "label": "Item Statistics",
      "query": [
        "id",
        "groupId"
      ],
      "description": "Item statistics represent various attributes of an item that can affect its performance, usability, and interaction within the Olio universe. These statistics include damage, protection, entrapment capabilities, range, and consumption/replenishment characteristics.",
      "fields": [
        {
          "name": "damage",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "protection",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "entrapment",
          "type": "int",
          "minValue": 0,
          "maxValue": 20,
          "validateRange": true
        },
        {
          "name": "range",
          "type": "int",
          "description": "Range in meters"
        },
        {
          "name": "consumptionType",
          "type": "string",
          "maxLength": 16,
          "description": "General indicator that the item passively or actively consumes some other item or resource.  It's up to the implementation rule to determine how."
        },
        {
          "name": "consumption",
          "type": "int",
          "minValue": 0,
          "description": "General indicator of how much of the consumptionType is consumed.  It's up to the implementation rule to determine how."
        },
        {
          "name": "replenishmentType",
          "type": "string",
          "maxLength": 16,
          "description": "General indicator that the item passively or actively replenishes some other item or resource.  It's up to the implementation rule to determine how."
        },
        {
          "name": "replenishment",
          "type": "int",
          "minValue": 0,
          "description": "General indicator of how much of the replenishmentType is replenished.  It's up to the implementation rule to determine how."
        }
      ]
    },
    {
      "name": "olio.animal",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.name",
        "common.groupExt",
        "data.tagsExt",
        "common.baseLight",
        "common.description",
        "common.alignment"
      ],
      "group": "Animals",
      "icon": "category",
      "label": "Animal",
      "query": [
        "id",
        "groupId",
        "name"
      ],
      "dedicatedParticipation": true,
      "description": "An animal is a living entity that can be interacted with in various ways, such as being tamed, trained, or used for various purposes. Animals can have traits, statistics, and states that define their behavior and capabilities.",
      "fields": [
        {
          "name": "type",
          "type": "string",
          "maxLength": 24
        },
        {
          "name": "category",
          "type": "string",
          "maxLength": 24,
          "shortName": "cat"
        },
        {
          "name": "groupName",
          "type": "string",
          "maxLength": 24,
          "shortName": "grpn"
        },
        {
          "name": "habitat",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "age",
          "type": "int"
        },
        {
          "name": "gender",
          "type": "string",
          "maxLength": 10
        },
        {
          "name": "traits",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.trait",
          "foreign": true,
          "participantModel": "person.trait"
        },
        {
          "name": "store",
          "type": "model",
          "baseModel": "olio.store",
          "foreign": true,
          "participantModel": "animal.store",
          "shortName": "sto"
        },
        {
          "name": "statistics",
          "type": "model",
          "baseModel": "olio.statistics",
          "foreign": true,
          "shortName": "sta"
        },
        {
          "name": "instinct",
          "type": "model",
          "baseModel": "olio.instinct",
          "foreign": true,
          "shortName": "inst"
        },
        {
          "name": "state",
          "type": "model",
          "baseModel": "olio.state",
          "foreign": true,
          "shortName": "st"
        }
      ]
    },
    {
      "name": "olio.realm",
      "inherits": [
        "data.directory",
        "common.description"
      ],
      "group": "Realms",
      "icon": "note",
      "label": "Realm",
      "dedicatedParticipation": true,
      "description": "This model represents a realm, which is a collection of communities and their associated data. It includes information about the realm's population, groups, locations, and other relevant details.",
      "fields": [
        {
          "name": "population",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "populationGroups",
          "type": "list",
          "baseType": "model",
          "baseModel": "auth.group",
          "foreign": true,
          "participantModel": "community.group"
        },
        {
          "name": "principalGroup",
          "type": "model",
          "baseModel": "auth.group",
          "foreign": true,
          "description": "Placeholder for a primary group (aka: party or band)"
        },
        {
          "name": "leadershipGroup",
          "type": "model",
          "baseModel": "auth.group",
          "foreign": true,
          "description": "Placeholder for any leadership group"
        },
        {
          "name": "origin",
          "baseModel": "data.geoLocation",
          "type": "model",
          "foreign": true,
          "participantModel": "community.origin"
        },
        {
          "name": "currentEpoch",
          "baseModel": "olio.event",
          "type": "model",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "currentEvent",
          "baseModel": "olio.event",
          "type": "model",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "currentIncrement",
          "baseModel": "olio.event",
          "type": "model",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "locations",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.geoLocation",
          "foreign": true,
          "participantModel": "community.location"
        },
        {
          "name": "zoo",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.animal",
          "foreign": true,
          "participantModel": "community.animal"
        },
        {
          "name": "currencies",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.item",
          "foreign": true,
          "participantModel": "community.currency"
        },
        {
          "name": "schedules",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.schedule",
          "participantModel": "community.schedule",
          "foreign": true
        },
        {
          "name": "store",
          "type": "model",
          "baseModel": "olio.store",
          "foreign": true,
          "participantModel": "person.store",
          "shortName": "sto"
        }
      ]
    },
    {
      "name": "olio.interaction",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "Interactions",
      "icon": "category",
      "label": "Interaction",
      "query": [
        "id",
        "groupId"
      ],
      "description": "Track interactions between an individual actor and individual interactor.  Interaction outcomes are defined as favorable, equilibrium, or unfavorable for the actor and interactor.  The context is determined elsewhere, such as at the event or actionResult level.",
      "fields": [
        {
          "name": "description",
          "type": "string",
          "maxLength": 128,
          "shortName": "dsc"
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.olio.InteractionEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "unknown",
          "shortName": "intt"
        },
        {
          "name": "state",
          "baseClass": "org.cote.accountmanager.schema.type.ActionResultEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "unknown",
          "shortName": "acts"
        },
        {
          "name": "interactionStart",
          "type": "zonetime",
          "shortName": "is"
        },
        {
          "name": "interactionEnd",
          "type": "zonetime",
          "shortName": "ie"
        },
        {
          "name": "actorType",
          "type": "string",
          "maxLength": 32,
          "shortName": "actt"
        },
        {
          "name": "actor",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "actorType",
          "shortName": "act"
        },
        {
          "name": "actorClaim",
          "type": "string",
          "maxLength": 128,
          "shortName": "acla",
          "description": "Textual statement representing the actor's immediate position of the interaction."
        },
        {
          "name": "actorInstinct",
          "type": "string",
          "maxLength": 32,
          "shortName": "ainst",
          "description": "Name of any primary instinct driving the interaction."
        },
        {
          "name": "actorPersonality",
          "type": "string",
          "maxLength": 32,
          "shortName": "aper",
          "description": "Name of any primary personality trait driving the interaction."
        },
        {
          "name": "actorStatistic",
          "type": "string",
          "maxLength": 32,
          "shortName": "asta",
          "description": "Name of any primary statistic driving the interaction."
        },
        {
          "name": "actorRoleSuggestion",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        },
        {
          "name": "actorRole",
          "baseClass": "org.cote.accountmanager.olio.CharacterRoleEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "unknown",
          "shortName": "actr"
        },
        {
          "name": "actorReasonSuggestion",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        },
        {
          "name": "actorReason",
          "baseClass": "org.cote.accountmanager.olio.ReasonEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "unknown",
          "shortName": "actrr"
        },
        {
          "name": "actorAlignmentSuggestion",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        },
        {
          "name": "actorAlignment",
          "baseClass": "org.cote.accountmanager.olio.AlignmentEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "unknown",
          "shortName": "acta"
        },
        {
          "name": "actorOutcome",
          "baseClass": "org.cote.accountmanager.olio.OutcomeEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "equilibrium",
          "shortName": "acto"
        },
        {
          "name": "actorThreatSuggestion",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        },
        {
          "name": "actorThreat",
          "baseClass": "org.cote.accountmanager.olio.ThreatEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "none",
          "shortName": "actth"
        },
        {
          "name": "interactorType",
          "type": "string",
          "maxLength": 32,
          "shortName": "iactt"
        },
        {
          "name": "interactor",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "interactorType",
          "shortName": "iact"
        },
        {
          "name": "interactorClaim",
          "type": "string",
          "maxLength": 128,
          "shortName": "icla",
          "description": "Textual statement representing the interactor's immediate position of the interaction."
        },
        {
          "name": "interactorInstinct",
          "type": "string",
          "maxLength": 32,
          "shortName": "iinst",
          "description": "Name of any primary instinct driving the interaction."
        },
        {
          "name": "interactorPersonality",
          "type": "string",
          "maxLength": 32,
          "shortName": "iper",
          "description": "Name of any primary personality trait driving the interaction."
        },
        {
          "name": "interactorStatistic",
          "type": "string",
          "maxLength": 32,
          "shortName": "ista",
          "description": "Name of any primary statistic driving the interaction."
        },
        {
          "name": "interactorRoleSuggestion",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        },
        {
          "name": "interactorRole",
          "baseClass": "org.cote.accountmanager.olio.CharacterRoleEnumType",
          "type": "enum",
          "maxLength": 32,
          "shortName": "iactr"
        },
        {
          "name": "interactorReason",
          "baseClass": "org.cote.accountmanager.olio.ReasonEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "unknown",
          "shortName": "iactrr"
        },
        {
          "name": "interactorReasonSuggestion",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        },
        {
          "name": "interactorAlignmentSuggestion",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        },
        {
          "name": "interactorAlignment",
          "baseClass": "org.cote.accountmanager.olio.AlignmentEnumType",
          "type": "enum",
          "maxLength": 32,
          "shortName": "iacta"
        },
        {
          "name": "interactorOutcome",
          "baseClass": "org.cote.accountmanager.olio.OutcomeEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "equilibrium",
          "shortName": "iacto"
        },
        {
          "name": "interactorThreatSuggestion",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        },
        {
          "name": "interactorThreat",
          "baseClass": "org.cote.accountmanager.olio.ThreatEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "none",
          "shortName": "iactth"
        }
      ]
    },
    {
      "name": "olio.narrative",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "query": [
        "id",
        "groupId"
      ],
      "icon": "category",
      "label": "Narrative",
      "group": "Narratives",
      "dedicatedParticipation": true,
      "description": "A narrative is a structured story or account that includes various elements such as characters, scenes, interactions, and descriptions. It can be used to create immersive experiences in games or simulations, providing detailed backgrounds and contexts for characters and events.",
      "fields": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "fullName",
          "type": "string"
        },
        {
          "name": "sceneDescription",
          "type": "string"
        },
        {
          "name": "interactionDescription",
          "type": "string"
        },
        {
          "name": "physicalDescription",
          "type": "string"
        },
        {
          "name": "outfitDescription",
          "type": "string"
        },
        {
          "name": "armamentDescription",
          "type": "string"
        },
        {
          "name": "statisticsDescription",
          "type": "string"
        },
        {
          "name": "alignmentDescription",
          "type": "string"
        },
        {
          "name": "darkTetradDescription",
          "type": "string"
        },
        {
          "name": "mbtiDescription",
          "type": "string"
        },
        {
          "name": "sloanDescription",
          "type": "string"
        },
        {
          "name": "sdPrompt",
          "type": "string"
        },
        {
          "name": "sdNegativePrompt",
          "type": "string"
        },
        {
          "name": "images",
          "type": "list",
          "baseType": "model",
          "baseModel": "data.data",
          "foreign": true,
          "participantModel": "narrative.image"
        }
      ]
    },
    {
      "name": "olio.llm.chatConfig",
      "inherits": [
        "data.directory",
        "common.description",
        "common.alignment",
        "crypto.vaultExt"
      ],
      "group": "Chat",
      "icon": "chat",
      "label": "Chat Configuration",
      "description": "Configuration for a chat session with an LLM (Large Language Model). This includes settings for characters, narratives, interactions, and various options to control the chat experience.",
      "fields": [
        {
          "name": "rating",
          "baseClass": "org.cote.accountmanager.olio.llm.ESRBEnumType",
          "type": "enum",
          "maxLength": 3,
          "default": "E"
        },
        {
          "name": "serviceType",
          "baseClass": "org.cote.accountmanager.olio.llm.LLMServiceEnumType",
          "type": "enum",
          "maxLength": 10,
          "default": "OPENAI"
        },
        {
          "name": "systemCharacter",
          "type": "model",
          "baseModel": "olio.charPerson",
          "foreign": true
        },
        {
          "name": "systemNarrative",
          "type": "model",
          "baseModel": "olio.narrative"
        },
        {
          "name": "userCharacter",
          "type": "model",
          "baseModel": "olio.charPerson",
          "foreign": true
        },
        {
          "name": "userNarrative",
          "type": "model",
          "baseModel": "olio.narrative"
        },
        {
          "name": "interactions",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.interaction",
          "foreign": true,
          "participantModel": "chatConfig.interaction",
          "followReference": false
        },
        {
          "name": "interaction",
          "type": "model",
          "baseModel": "olio.interaction",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "event",
          "type": "model",
          "baseModel": "olio.event",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "useNLP",
          "type": "boolean"
        },
        {
          "name": "stream",
          "type": "boolean"
        },
        {
          "name": "nlpCommand",
          "type": "string",
          "description": "Brief phrase (not a complete sentence) of what to reinfore through NLP during a chat conversation"
        },
        {
          "name": "useJailBreak",
          "type": "boolean"
        },
        {
          "name": "prune",
          "type": "boolean"
        },
        {
          "name": "scene",
          "type": "string"
        },
        {
          "name": "terrain",
          "type": "string"
        },
        {
          "name": "populationDescription",
          "type": "string"
        },
        {
          "name": "animalDescription",
          "type": "string"
        },
        {
          "name": "includeScene",
          "type": "boolean"
        },
        {
          "name": "setting",
          "type": "string",
          "default": "random"
        },
        {
          "name": "model",
          "type": "string",
          "default": "dolphin-llama3"
        },
        {
          "name": "analyzeModel",
          "type": "string",
          "default": "dolphin-llama3"
        },
        {
          "name": "userPrompt",
          "type": "string"
        },
        {
          "name": "universeName",
          "type": "string",
          "description": "Name of any olio universe related to the characters or interactions."
        },
        {
          "name": "worldName",
          "type": "string",
          "description": "Name of any olio world related to the characters or interactions."
        },
        {
          "name": "startMode",
          "type": "string",
          "maxLength": "16",
          "description": "Variant used to control how a chat begins",
          "limit": [
            "user",
            "system",
            "none"
          ],
          "default": "none"
        },
        {
          "name": "episodes",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.episode"
        },
        {
          "name": "chatOptions",
          "type": "model",
          "baseModel": "olio.llm.chatOptions"
        },
        {
          "name": "apiVersion",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "serverUrl",
          "type": "string",
          "maxLength": 512,
          "default": "http://localhost:11434"
        },
        {
          "name": "apiKey",
          "type": "string",
          "maxLength": 256,
          "provider": "org.cote.accountmanager.provider.EncryptFieldProvider",
          "encrypt": true
        },
        {
          "name": "assist",
          "type": "boolean"
        },
        {
          "name": "remindEvery",
          "type": "int",
          "default": 6,
          "description": "When assist is true, the number of user messages before any reminder text is included in the conversation history"
        },
        {
          "name": "keyframeEvery",
          "type": "int",
          "default": 0,
          "description": "When assist is true and prune is true, the number of messages after any previous keyframe or after the beginning of the message history before conducting a conversation analysis.  This is intended to be an objective summary of the conversation to preserve context and important details"
        },
        {
          "name": "messageTrim",
          "type": "int",
          "default": 20,
          "description": "When prune is true, sets the size of the message history to include in each request. messageTrim and keyframeEvery should be the same size when used in conjunction.  Note: The entire conversation is always preserved and may be used for summarization and analysis, this only affects the number of messages to include when using the chat capability."
        },
    {
          "name": "policy",
          "type": "model",
          "baseModel": "policy.policy",
          "foreign": true
        }
      ]
    },
    {
      "name": "olio.llm.promptConfig",
      "inherits": [
        "data.directory",
        "common.description",
        "common.alignment"
      ],
      "group": "Chat",
      "icon": "chat",
      "label": "Prompt Configuration",
      "description": "Configuration for prompts used in chat sessions with an LLM (Large Language Model). This includes system prompts, user prompts, and various settings to control the chat experience.",
      "fields": [
        {
          "name": "system",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "systemCensorWarning",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "systemNlp",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "systemSDPrompt",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "systemNarrate",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "systemAnalyze",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "assistant",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "assistantAnalyze",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "assistantNarrate",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "assistantNlp",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "assistantCensorWarning",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "assistantReminder",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "user",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userReminder",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userAnalyze",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userCitation",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userNarrate",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userReduce",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "jailBreak",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "scene",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "setting",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userConsentPrefix",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userConsentRating",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userConsentNlp",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "femalePerspective",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "malePerspective",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "races",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.promptRaceConfig"
        },
        {
          "name": "outfit",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "userOutfit",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "assistantOutfit",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "episodeRule",
          "type": "list",
          "baseType": "string"
        }
      ]
    },
    {
      "name": "olio.llm.promptRaceConfig",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "raceType",
          "baseClass": "org.cote.accountmanager.olio.RaceEnumType",
          "type": "enum",
          "maxLength": 2,
          "default": "E"
        },
        {
          "name": "race",
          "type": "list",
          "baseType": "string"
        }
      ]
    },
    {
      "name": "olio.pointOfInterest",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight"
      ],
      "group": "POIs",
      "icon": "category",
      "label": "Point of Interest",
      "dedicatedParticipation": true,
      "sortField": "name",
      "sortOrder": "ASCENDING",
      "query": [
        "location",
        "groupId",
        "organizationId"
      ],
      "description": "This model represents a point of interest in a realm, such as a building, landmark, or other significant location. It includes details about the point's name, type, location, and associated store or builder.",
      "fields": [
        {
          "name": "name",
          "type": "string",
          "maxLength": 128
        },
        {
          "name": "description",
          "type": "string",
          "maxLength": 256
        },
        {
          "name": "type",
          "baseClass": "org.cote.accountmanager.olio.PointOfInterestEnumType",
          "type": "enum",
          "maxLength": 32,
          "default": "unknown"
        },
        {
          "name": "concealed",
          "type": "boolean"
        },
        {
          "name": "location",
          "type": "model",
          "baseModel": "data.geoLocation",
          "foreign": true,
          "followReference": false
        },
        {
          "name": "store",
          "type": "model",
          "baseModel": "olio.store",
          "foreign": true,
          "participantModel": "poi.store",
          "shortName": "sto"
        },
        {
          "name": "builder",
          "type": "model",
          "baseModel": "olio.builder",
          "foreign": true,
          "participantModel": "poi.build",
          "shortName": "bld"
        },
        {
          "name": "east",
          "type": "int",
          "description": "Meters from the western grid line of the location",
          "default": -1
        },
        {
          "name": "north",
          "type": "int",
          "description": "Meters from the northern grid line of the location",
          "default": -1
        }
      ]
    },
    {
      "name": "olio.world",
      "inherits": [
        "data.directory",
        "common.description"
      ],
      "factory": "org.cote.accountmanager.olio.WorldFactory",
      "group": "Worlds",
      "icon": "note",
      "label": "World",
      "description": "Collection of groups used to represent a world.",
      "fields": [
        {
          "name": "population",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "locations",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "addresses",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "contacts",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "features",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "events",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "words",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "names",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "surnames",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "occupations",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "dictionary",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "traits",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "colors",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "patterns",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "apparel",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "wearables",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "qualities",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "statistics",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "instincts",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "behaviors",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "states",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "personalities",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "basis",
          "baseModel": "olio.world",
          "type": "model",
          "foreign": true
        },
        {
          "name": "schedules",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "actions",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "actionResults",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "builders",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "stores",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "inventories",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "interactions",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "items",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "animals",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "gallery",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "narratives",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "tagsGroup",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true,
          "description": "Using an alternate name so as not to conflict with the existing 'tags' property"
        },
        {
          "name": "realmsGroup",
          "baseModel": "auth.group",
          "type": "model",
          "foreign": true
        },
        {
          "name": "profiles",
          "type": "model",
          "baseModel": "auth.group",
          "foreign": true
        },
        {
          "name": "pointsOfInterest",
          "type": "model",
          "baseModel": "auth.group",
          "foreign": true
        },
        {
          "name": "realms",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.realm",
          "foreign": true,
          "followReference": false
        }
      ]
    },
    {
      "name": "olio.llm.episode",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "theme",
          "type": "string",
          "maxLength": 128
        },
        {
          "name": "name",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "completed",
          "type": "boolean"
        },
        {
          "name": "summary",
          "type": "string"
        },
        {
          "name": "episodeAssist",
          "type": "string"
        },
        {
          "name": "number",
          "type": "int",
          "default": 0
        },
        {
          "name": "stages",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "duration",
          "type": "int",
          "default": 0,
          "description": "Number of minutes the episode should last."
        }
      ]
    },
    {
      "name": "olio.sd.config",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "imageAction",
          "type": "string",
          "description": "Verb phrase describing the action to be performed in the image."
        },
        {
          "name": "seed",
          "type": "int",
          "default": -1
        },
        {
          "name": "hires",
          "type": "boolean",
          "default": true
        },
        {
          "name": "imageCount",
          "type": "int",
          "default": 1,
          "minValue": 1,
          "maxValue": 5
        },
        {
          "name": "imageSetting",
          "type": "string",
          "default": "random"
        },
        {
          "name": "bodyStyle",
          "type": "string",
          "default": "full body"
        },
        {
          "name": "stillCamera",
          "type": "string"
        },
        {
          "name": "film",
          "type": "string"
        },
        {
          "name": "lens",
          "type": "string"
        },
        {
          "name": "colorProcess",
          "type": "string"
        },
        {
          "name": "photographer",
          "type": "string"
        },
        {
          "name": "movieCamera",
          "type": "string"
        },
        {
          "name": "movieFilm",
          "type": "string"
        },
        {
          "name": "director",
          "type": "string"
        },
        {
          "name": "photoStyle",
          "type": "string"
        },
        {
          "name": "style",
          "type": "string",
          "limit": [
            "art",
            "movie",
            "photograph"
          ]
        },
        {
          "name": "artStyle",
          "type": "string"
        }
      ]
    },
    {
      "name": "olio.sd.configData",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "stillCameras",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "films",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "lenses",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "colorProcesses",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "photographers",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "movieCameras",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "movieFilms",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "directors",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "photoStyles",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "artStyles",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "styles",
          "type": "list",
          "baseType": "string"
        }
      ]
    },
    {
      "name": "olio.llm.vectorChatHistory",
      "inherits": [
        "data.vectorModelStore"
      ],
      "query": [],
      "hints": [],
      "description": "Used for storing chat history with vector embeddings",
      "fields": [
        {
          "name": "systemCharacter",
          "baseModel": "olio.charPerson",
          "type": "model",
          "foreign": true
        },
        {
          "name": "userCharacter",
          "baseModel": "olio.charPerson",
          "type": "model",
          "foreign": true
        },
        {
          "name": "event",
          "baseModel": "olio.event",
          "type": "model",
          "foreign": true
        },
        {
          "name": "session",
          "baseModel": "data.data",
          "type": "model",
          "foreign": true
        },
        {
          "name": "chatConfig",
          "baseModel": "olio.llm.chatConfig",
          "type": "model",
          "foreign": true
        },
        {
          "name": "promptConfig",
          "baseModel": "olio.llm.promptConfig",
          "type": "model",
          "foreign": true
        }
      ]
    },
    {
      "name": "olio.llm.vectorChatHistoryList",
      "ephemeral": true,
      "factory": "org.cote.accountmanager.olio.llm.VectorChatHistoryListFactory",
      "fields": [
        {
          "name": "vectors",
          "baseType": "model",
          "baseModel": "olio.llm.vectorChatHistory",
          "type": "list"
        }
      ]
    },
    {
      "name": "olio.llm.chatOptions",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "top_k",
          "type": "int",
          "default": 50,
          "minValue": 0,
          "maxValue": 1
        },
        {
          "name": "top_p",
          "type": "double",
          "default": 1,
          "minValue": 0,
          "maxValue": 1
        },
        {
          "name": "min_p",
          "type": "double",
          "default": 0.1,
          "minValue": 0,
          "maxValue": 1
        },
        {
          "name": "typical_p",
          "type": "double",
          "default": 0.85,
          "minValue": 0,
          "maxValue": 1
        },
        {
          "name": "repeat_last_n",
          "type": "int",
          "default": 64,
          "minValue": 0,
          "maxValue": 100
        },
        {
          "name": "temperature",
          "type": "double",
          "default": 1,
          "minValue": 0,
          "maxValue": 2
        },
        {
          "name": "repeat_penalty",
          "type": "double",
          "default": 1.2,
          "minValue": 0,
          "maxValue": 2
        },
        {
          "name": "num_ctx",
          "type": "int",
          "default": 8192,
          "minValue": 0,
          "maxValue": 120000
        },
        {
          "name": "num_gpu",
          "type": "int",
          "default": 1
        }
      ]
    },
    {
      "name": "olio.llm.chatRequest",
      "inherits": [
        "data.directory"
      ],
      "group": "ChatRequests",
      "icon": "chat",
      "label": "Requests",
      "query": [
        "id",
        "groupId",
        "chatConfig",
        "promptConfig",
        "session",
        "sessionType"
      ],
      "description": "Used for proxying chat requests",
      "fields": [
        {
          "name": "message",
          "type": "string",
          "ephemeral": true
        },
        {
          "name": "uid",
          "type": "string",
          "maxLength": 64,
          "ephemeral": true
        },
        {
          "name": "chatConfig",
          "type": "model",
          "baseModel": "olio.llm.chatConfig",
          "foreign": true
        },
        {
          "name": "promptConfig",
          "type": "model",
          "baseModel": "olio.llm.promptConfig",
          "foreign": true
        },
        {
          "name": "sessionType",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "session",
          "baseModel": "$flex",
          "type": "model",
          "foreign": true,
          "foreignType": "sessionType"
        },
        {
          "name": "data",
          "type": "list",
          "baseType": "string",
          "ephemeral": true
        }
      ]
    },
    {
      "name": "olio.llm.chatResponseModel",
      "ioConstraints": [
        "unknown"
      ],
      "description": "Used for proxying chat responses",
      "fields": [
        {
          "name": "messages",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.message"
        },
        {
          "name": "actor",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "uid",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "model",
          "type": "string",
          "maxLength": 64
        }
      ]
    },
    {
      "name": "olio.llm.message",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "role",
          "type": "string",
          "maxLength": 32
        },
        {
          "name": "content",
          "type": "string"
        },
        {
          "name": "pruned",
          "type": "boolean",
          "ephemeral": true
        }
      ]
    },
    {
      "name": "olio.llm.ollama.ollamaMessage",
      "ioConstraints": [
        "unknown"
      ],
      "inherits": [
        "olio.llm.message"
      ],
      "fields": [
        {
          "name": "images",
          "type": "string",
          "description": "Not currently used or correct"
        }
      ]
    },
    {
      "name": "olio.llm.request",
      "abstract": true,
      "fields": [
        {
          "name": "model",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "options",
          "type": "model",
          "baseModel": "olio.llm.chatOptions"
        },
        {
          "name": "stream",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "olio.llm.ollama.ollamaRequest",
      "ioConstraints": [
        "unknown"
      ],
      "inherits": [
        "olio.llm.request"
      ],
      "fields": [
        {
          "name": "prompt",
          "type": "string"
        },
        {
          "name": "system",
          "type": "string"
        },
        {
          "name": "context",
          "type": "list",
          "baseType": "int"
        },
        {
          "name": "messages",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.ollama.ollamaMessage"
        }
      ]
    },
    {
      "name": "olio.llm.response",
      "ioConstraints": [
        "unknown"
      ],
      "abstract": true,
      "fields": [
        {
          "name": "model",
          "type": "string",
          "maxLength": 64
        },
        {
          "name": "response",
          "type": "string"
        }
      ]
    },
    {
      "name": "olio.llm.ollama.ollamaResponse",
      "ioConstraints": [
        "unknown"
      ],
      "inherits": [
        "olio.llm.response"
      ],
      "fields": [
        {
          "name": "created_at",
          "type": "string"
        },
        {
          "name": "context",
          "type": "list",
          "baseType": "int"
        },
        {
          "name": "done",
          "type": "boolean"
        },
        {
          "name": "total_duration",
          "type": "long"
        },
        {
          "name": "load_duration",
          "type": "long"
        },
        {
          "name": "done_reason",
          "type": "string"
        },
        {
          "name": "prompt_eval_count",
          "type": "int"
        },
        {
          "name": "prompt_eval_duration",
          "type": "long"
        },
        {
          "name": "eval_count",
          "type": "int"
        },
        {
          "name": "eval_duration",
          "type": "long"
        },
        {
          "name": "message",
          "type": "model",
          "baseModel": "olio.llm.ollama.ollamaMessage"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiMessage",
      "ioConstraints": [
        "unknown"
      ],
      "inherits": [
        "olio.llm.message"
      ],
      "fields": [
        {
          "name": "annotations",
          "type": "list",
          "baseType": "string"
        },
        {
          "name": "context",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.openai.openaiCitation"
        },
        {
          "name": "refusal",
          "type": "string"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiRequest",
      "likeInherits": [
        "data.directory"
      ],
      "inherits": [
        "common.groupExt",
        "common.baseLight",
        "olio.llm.request"
      ],
      "description": "An OpenAI request model that defines the parameters for making requests to OpenAI's language models. This includes settings like temperature, max tokens, and the messages to be processed by the model.",
      "group": "ChatRequests",
      "icon": "chat",
      "label": "Requests",
      "vector": "org.cote.accountmanager.olio.VectorProvider",
      "query": [
        "id",
        "groupId"
      ],
      "fields": [
        {
          "name": "max_completion_tokens",
          "type": "int",
          "default": 2048,
          "minValue": 0,
          "maxValue": 120000,
          "description": "For o1 and later models"
        },
        {
          "name": "max_tokens",
          "type": "int",
          "default": 2048,
          "minValue": 0,
          "maxValue": 120000
        },
        {
          "name": "num_ctx",
          "type": "int",
          "default": 2048,
          "minValue": 0,
          "maxValue": 120000,
          "description": "Cross compat for Ollama OpenAI"
        },
        {
          "name": "temperature",
          "type": "double",
          "default": 0.75
        },
        {
          "name": "top_p",
          "type": "double",
          "default": 0.5
        },
        {
          "name": "frequency_penalty",
          "type": "double",
          "default": 1.3
        },
        {
          "name": "presence_penalty",
          "type": "double",
          "default": 1.3
        },
        {
          "name": "messages",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.openai.openaiMessage"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiResponse",
      "ioConstraints": [
        "unknown"
      ],
      "inherits": [
        "olio.llm.response"
      ],
      "fields": [
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "system_fingerprint",
          "type": "string"
        },
        {
          "name": "created",
          "type": "long"
        },
        {
          "name": "object",
          "type": "string"
        },
        {
          "name": "usage",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiUsage"
        },
        {
          "name": "message",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiMessage"
        },
        {
          "name": "choices",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.openai.openaiChoice"
        },
        {
          "name": "prompt_filter_results",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResults"
        },
        {
          "name": "created_at",
          "type": "string"
        },
        {
          "name": "done",
          "type": "boolean"
        },
        {
          "name": "total_duration",
          "type": "long"
        },
        {
          "name": "load_duration",
          "type": "long"
        },
        {
          "name": "done_reason",
          "type": "string"
        },
        {
          "name": "prompt_eval_count",
          "type": "int"
        },
        {
          "name": "prompt_eval_duration",
          "type": "long"
        },
        {
          "name": "eval_count",
          "type": "int"
        },
        {
          "name": "eval_duration",
          "type": "long"
        },
        {
          "name": "data",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.openai.openaiData"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiChoice",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "finish_reason",
          "type": "string"
        },
        {
          "name": "logprobs",
          "type": "double",
          "default": 0
        },
        {
          "name": "index",
          "type": "int"
        },
        {
          "name": "message",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiMessage"
        },
        {
          "name": "content_filter_results",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResults"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiContext",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "citations",
          "type": "list",
          "baseType": "model",
          "baseModel": "olio.llm.openai.openaiCitation"
        },
        {
          "name": "intent",
          "type": "list",
          "baseType": "string"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiCitation",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "content",
          "type": "string"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "filepath",
          "type": "string"
        },
        {
          "name": "chunk_id",
          "type": "int"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiUsage",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "completion_tokens",
          "type": "int"
        },
        {
          "name": "prompt_tokens",
          "type": "int"
        },
        {
          "name": "total_tokens",
          "type": "int"
        },
        {
          "name": "completion_tokens_details",
          "type": "string"
        },
        {
          "name": "prompt_tokens_details",
          "type": "string"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiFilterResult",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "filtered",
          "type": "boolean"
        },
        {
          "name": "detected",
          "type": "boolean"
        },
        {
          "name": "severity",
          "type": "string",
          "maxLength": 64
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiFilterResults",
      "ioConstraints": [
        "unknown"
      ],
      "inherits": [
        "olio.llm.response"
      ],
      "fields": [
        {
          "name": "hate",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResult"
        },
        {
          "name": "protected_material_code",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResult"
        },
        {
          "name": "protected_material_text",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResult"
        },
        {
          "name": "self_harm",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResult"
        },
        {
          "name": "sexual",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResult"
        },
        {
          "name": "violence",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResult"
        },
        {
          "name": "jailbreak",
          "type": "model",
          "baseModel": "olio.llm.openai.openaiFilterResult"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiData",
      "ioConstraints": [
        "unknown"
      ],
      "inherits": [
        "olio.llm.response"
      ],
      "fields": [
        {
          "name": "object",
          "type": "string"
        },
        {
          "name": "index",
          "type": "int"
        },
        {
          "name": "embedding",
          "type": "list",
          "baseType": "float"
        }
      ]
    },
    {
      "name": "olio.llm.openai.openaiInput",
      "ioConstraints": [
        "unknown"
      ],
      "fields": [
        {
          "name": "input",
          "type": "string"
        }
      ]
    }
  ],
  "validationRules": [
    {
      "schema": "policy.validationRule",
      "name": "emailRule",
      "expression": "^[a-zA-Z0-9_!#$%&’*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$",
      "type": "boolean"
    },
    {
      "schema": "policy.validationRule",
      "name": "minLen5",
      "type": "boolean",
      "expression": "[A-Za-z0-9]{5}",
      "rules": [
        "${notEmpty}"
      ]
    },
    {
      "schema": "policy.validationRule",
      "name": "notEmpty",
      "type": "boolean",
      "expression": "\\S",
      "rules": [
        "${trimEnds}"
      ]
    },
    {
      "schema": "policy.validationRule",
      "name": "notInParent",
      "type": "function",
      "function": "!{notInParent}"
    },
    {
      "schema": "policy.validationRule",
      "name": "trimBegin",
      "expression": "^\\s+",
      "type": "replacement",
      "replacementValue": "",
      "replacementValueType": "string"
    },
    {
      "schema": "policy.validationRule",
      "name": "trimEnd",
      "expression": "\\s+$",
      "type": "replacement",
      "replacementValue": "",
      "replacementValueType": "string"
    },
    {
      "schema": "policy.validationRule",
      "name": "trimEnds",
      "type": "none",
      "rules": [
        "${trimBegin}",
        "${trimEnd}"
      ]
    }
  ]
};

  if (typeof module != "undefined") {
    module.am7model = am7model;
  } else {
    window.am7model = am7model;
  }

}());