olio (hodgepodge) contains a variety of data randomization and evolution models and utilities.

LLM
ollama docker - https://ollama.com/blog/ollama-is-now-available-as-an-official-docker-image
docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
docker exec -it ollama ollama run llama2:13b-text
docker exec -it ollama ollama run dolphin-mistral

curl http://localhost:11434/api/generate -d '{
  "model": "dolphin-mistral",
  "prompt": "Write a narrative description of the following: ",
  "stream": false
}'

Evolution
The original evolution rules were pretty rudimentary - Run through a set of hard-coded random rules across locations twelve times a year (once a month) to simulate birth, death, marriage, divorce, immigration.  Also, there was no real way to interrupt the process in the middle of an evolution so it was in no way interactive.

The following is the current thinking on the context and evolution cycle, and related data structures:

Data:
	- Data is split between the 'universe' and the 'world'.  Static and template data is loaded into the universe, which is technically in an adjacent set of groups
	- Evolution data (or that data intended to change or track state) is copied as needed into the 'world', or generated directly in the world
	- For example: World location data is loaded in the 'universe'.  Evolution specific location data is copied into the 'world'.  Or, when using generated maps, the initial map generation is placed in the 'universe' and the evolution data and cell level data in the 'world'

Context
	- The Olio Context primarily relates events and locations.
		- At the moment, there are no specific 'community', 'civilization', 'country' associations at the context level - it's up to the locations and rules to stipulate
		- A realm model exists to represent these, and includes a pointer to the origin location given that temporal event context originates from those points
		
	- Events are organized in the following hierarchy:
		- Construction - the root event for the world contains construct and incept events for introduced locations
		
Time (Machine)
	- When the olio models are journaled (by inheriting data.journalExt), they allow a sort of 'time machine' effect to take place on event sequences
	- A simulation may run over a period of time, and then, at any point in the sequence, it could be forked at a particular place and time into a separate 'world', which could then proceed with it's own variation and history from the point of divergence
	- For example, journaling state, statistics, personality, and instinct would allow the unique qualities of a character to be retrieved from a point in time
	- Note: participations are not yet covered by journaling, so inventories and relationships are not yet covered  

Context Rules (IOlioContextRule):
	- Rules evaluated during context initialization and setup.  This allows for creating custom locations or picking locations from any loaded world data.
Evolution Rules (IOlioEvolutionRule):
	- Rules evaluated during evolution cycles. This will allow for tailoring the progression over a particular event.
	- There currently isn't the concept of civilizations or countries
	- Rather, there are populations of people in locations, associated with an initial location. 

Rule Evaluation:
Where the original data generator created generic life events on a monthly basis, the new version is meant to configurable, allowing to use whichever rules are desired.
   
	
Locations and Mapping
Locations can use global geolocation data with correct latitudes, longitudes, and names,
or generated locations to use the Military Grid Reference System (MGRS)

Terrain blasting and walking is used to create the semblance of a landscape, though the results won't be very realistic since there's zero attention paid to elevation, weather, etc.

NEW METRICS

Personality Traits
Primary (Big 5 - OCEAN):
	Openness - [inventive/curiosity to consistent/cautious]
	  	Non-curious (low)
	  	Inquisitive (high)
	Conscientiousness - [organized/efficient to extravagant/careless]
	    Organized (high)
	    Unstructered (low)
	Extraversion - [outgoing/energetic to solitary/reserved]
	    Social (high)
	    Reserved (low)
	Agreeableness - [friendly/compassionate to critical/rational/detached]
	    Accommodating (high)
	    Egocentric (low)
	Neuroticism - [resilient/confident to sensitive/nervous]
	    Limbic (high)
	    Calm (low)

Careers by personality type: https://similarminds.com/personality_types.html

Extraversion + Sociable, energetic, assertive, outgoing, confident - Dominant, attention-seeking, impulsive, talkative
Neuroticism	+ Very aware of risks, problems, and issues. More aware of others’ negative emotions - Anxious, moody, prone to stress, easily upset
Conscientiousness + Organized, responsible, reliable, diligent, disciplined - Perfectionistic, rigid, overly cautious, workaholic
Agreeableness + Compassionate, empathetic, cooperative, tolerant - Submissive, overly trusting, conflict-avoidant, gullible
Openness + Imaginative, curious, creative, open-minded, adaptable - Unfocused, impractical, prone to overthinking, unpredictable

+ Creativity (std attribute)
+ Spirituality (std attribute)
+ Magic ~ Fae = avg(creativity, spirituality, willpower, wisdom) (Reclassify magic/fae potential from its own discrete value to an average of other values)
+ Science = avg(intelligence, creativity, wisdom) 

From https://psychcentral.com/health/personality-type-compatibility#personality-compatibility
ISTJ — The Inspector
ISTP — The Crafter
ISFJ — The Protector
ISFP — The Artist
INFP — The Mediator
INFJ — The Advocate
INTP — The Thinker
INTJ — The Architect
ESTJ — The Director
ESTP — The Persuader
ESFP — The Performer
ESFJ — The Caregiver
ENFP — The Champion
ENFJ — The Giver
ENTP — The Debater
ENTJ — The Commander

Compatibility:
Romantic satisfaction rates over 70%:

SJ: sensing and judging
NF: intuiting and feeling

These categories would be the most compatible:

ISTJ, ESTJ, ISFJ, and ESFJ
INFP, ENFP, INFJ, and ENFJ

Most highly compatible matches:

ENFJ and INFP
ENTJ and INFP
INFJ and ENFP
INTJ and ENFP
ENTP and INFJ
ISFP and ENFJ
ENTP and INTJ
INTP and ENTJ
ESTJ and ISFP
ESFJ and ISFP
ISTJ and ESFP
ISFJ and ESFP
ESTJ and ISTP
ESFJ and ISTP

https://www.verywellmind.com/the-myers-briggs-type-indicator-2795583
https://www.typematchapp.com/what-personality-types-clash-most/

Clashing types:
ESTP and INFP
ISTP and ENFP
ESTJ and INFJ
ISTJ and ENFJ
ESFP and INTP
ISFP and ENTP
ESFJ and INTJ
ISFJ and ENTJ

Character Roles
Given the typical roles a character may play: Protagonist, Deuteragonist (sidekick), Contagonist (antagonist sidekick), Antagonist, Antihero, Guide, Henchmen, Love Interest, Temptress, Confidant, Foil,
These roles are traditionally applied to the overall 'narrative' from the narrator or character point of view.
In the olio context, the role is defined at the level of 'interaction'

Interaction
Interaction is meant to capture an evaluatable exchange between two parties (person, animal, etc), the 'actor' and the 'interactor'.
The actor initiates the interaction (interaction.type), acting in a contextual role (interaction.actorRole), behaving with some alignment (interaction.actorAlignment), representing a threat, target, or equilibration (interaction.actorThreat) for some reason (interaction.actorReason).
The interactor reacts to the actor threat, reason, role, and alignment for the type of interaction, so that the interactor's role (interaction.interactorRole) is aligned, opposed, or tangental to the actor's role, responding with a threat, as a target, or with equilibration, for some reason (interaction.interactorReason).
A general description (interaction.description) may be used to describe what is happening, the actor's motivation (interaction.actorclaim) and interactor's motivation (interaction.interactorClaim) may be used to provide narrative cues to why the actor is doing something, and why the interactor is responding the way they are.
The actor and interactor both receive an outcome (interaction.actorOutcome, interaction.interactorOutcome) when the interaction completes.
The interaction result state (interaction.state) is relative to the actor and the type of interaction.

Example 1: Actor 1 and Actor 2 talk about the weather for five minutes.
Actor 1 may start because they are trying to become friends with Actor 2, so actor 1's reason for trying is FRIENDSHIP.
Actor 2, meanwhile, is a big intravert, so the reason for their response is INTRAVERSION.
Each actor's role is meant to be contextual, so while they may primarily develop into CharacterRole A, at the interaction level they may be in a completely different role.
The determination of role can be based on a combination of a number of factors, including instinct, statistic, personality, or prior interactions or events.
For this example, Actor 1 may be in a FRIENDSHIP_INTEREST role.  Alternately, if Actor 1 is helping Actor 2 navigate somewhere, Actor 1 could be in a GUIDE role.  Or, if ulterior motives are involved, such as distracting Actor 2 from something, then Actor 1 may be in a HENCHMAN role, etc.
Actor 2, meanwhile, may be in an INDETERMINATE or STRANGER role, relative to Actor 1.
Therefore, the reason does not directly equate to the role, while the combination of the actor reason/role can be dynamic with the interactors reason/role.
This allows for a simple exchange like Actor 1 talking to Actor 2 about the weather to capture more subtext about the interaction than the surface narrative may otherwise describe.
The interaction threat is used to describe threat motivations for both.
Actor 1 may be benign and not be representing a threat, and therefore represent a threat of NONE.
However, Actor 2 may be a coward and perceive Actor 1 as threat, therefore their threat would be a *_TARGET.
For example, Actor 1 may be ugly but have no threat motivation (ONNE), while Actor 2 may be a narcissist, and therefore Actor 1 talking to Actor 2 gives Actor 2 a threat value of SOCIAL_TARGET.
The outcome for both can be determined however desired.
When the interaction is associated with an Action or Event, those may in turn define other qualifying characteristics such as was anyone around to see it, or how should the result positevely or negatively impact instinct, material possession, state, or social consideration.

Example 2: Events with Actions with Interactions
Actor 1 wants to talk to Actor 2 about the weather, and Actor 3 is watching.  This can be expressed as event, with Actors 1 and 2 being the actors, and Actor 3 being the observer.
A new ActionResult is created for some action (call it whatever, such as 'talk').  As the initiator, Actor 1 becomes the actor for the Action 1.
A new Interaction is created for Actor 1 and Actor 2, and proceeds as with Example 1.
Once the interaction is completed, then the Action Result outcome can be determined, and then any subsequent interactions determined.
For example, if Actor 2 has a VERY_UNFAVORABLE outcome, Actor 3's personality or prior history may spawn a response to Actor 1, which becomes an interaction from Actor 3 to Actor 1.
Or, Actor 3 may fall into a role relative to Actor 2 that would be counter to Actor 1 having a positive outcome in Actor 1's role, and this could become an interaction from Actor 3 to Actor 2.
Or, Actor 2, with an UNFAVORABLE outcome, may turn to Actor 3 for support, which would become an interaction between Actor 2 to Actor 3.
In this way, group activities become overlapping 1-to-1 interactions, whose outcomes lead into further interactions or completion of an action or event. 


Magic
ORIGINAL RAW NOTES
The following raw notes were taken from a thirty-year-old table-top gaming system I developed and played out.  The logic will be used as an example set of population rules. 


Attributes are measured in points, and cap at 20 (initial allotment 100).  Fae caps at 200.
Skills are measured in percentages, and initially cannot be allocated above 50%.  Fae skills cost 4x. Skills decay from disuse over time (100 - skill%) = days before 1% decay.  Skills don't decay belowe 60%.

Attributes: 
Physical strength
Physical endurance
Agility
Speed
Mental strength
Intelligence
Wisdom
Fae (Magic)
Manual dexterity
Charisma: Not personality - prejudicial attitudes towards character's relative looks, relative interaction with people



Reaction = (Agility + Speed + Wisdom) / 3
Fight:
   - roll to hit (fight/weapon skill).
   - roll to dodge (agility + speed) or parry (fight/weapon skill against equal or lesser class)
   - if hit and not dodged or parried, go to ADS

Parry:
   - (skill % - attack) = ParryModifier (PM)
   - (ParrySkill - PM) = Minimum percent to parry
Armor Damaging System (ADS)
   - (a) total armor hit points: total amount of armor protection
   - (b) armor stress point: number needed to pierce/puncture/break through armor
   - (c) armor absorption percentage: armor protection percentage
   
   - (d) effective attack skill (calculated): (fight/weapon skill - absorption(c))
   - (e) damage calculation: 5% - (c) = target and armor damaged; (c) to (fight/weapon skill) = armor damaged; above (skill) miss
   - Eg: Weapon skill 75%.  Absorbtion 35%.  Target and armor take damage below 40%, while only armor between 40 and 75, and above 75 is a miss

Area Fubar Chart:
1) Minor shockwave or small effect
2) Stronger, noticeable effect. Low damage to those in short radius (10m)
3) Definate effect noticed, all present aware the person did something, damage to 15m
4) Strong effect noticed, all present in 20m take damage
5) Concussion level shock wave, all in 40m take damage
6) Dangerous level of activity, anyone in 60m take damage
7) Anyone in 80m take damage
8) Anyone in 120m take damage

Magic/Skill types:
1) innate capacity - everyday person, essentially doesn't really stand out
2) some capacity - must train to low/mid level effect
3) high capacity - high affinity and may be trained to maximum degree and effect

Critical determination
For critical states, an additional percent is rolled:
0 - 50%: Regular outcome
51 - 85%: Double outcome
86 - 95%: Triple/messed-up outcome
96 - 00%: Deadly/total outcome 

Saving throws:
Death, Sickness/Poison, Magic: ((strength, health, willpower)/3) x 5 = Save death Percent