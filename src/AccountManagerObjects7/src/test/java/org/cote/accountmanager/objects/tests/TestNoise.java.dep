package org.cote.accountmanager.objects.tests;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;

import org.junit.Test;

import de.articdive.jnoise.core.api.functions.Interpolation;
import de.articdive.jnoise.core.util.vectors.Vector;
import de.articdive.jnoise.generators.noise_parameters.fade_functions.FadeFunction;
import de.articdive.jnoise.generators.noisegen.perlin.PerlinNoiseGenerator;
import de.articdive.jnoise.generators.noisegen.worley.WorleyNoiseGenerator;
import de.articdive.jnoise.generators.noisegen.worley.WorleyNoiseResult;
import de.articdive.jnoise.pipeline.JNoise;
import de.articdive.jnoise.pipeline.JNoiseDetailed;

public class TestNoise extends BaseTest {
	class NoisePoint{
		private int x = 0;
		private int y = 0;
		private int color = 0;
		private double noise = 0.0;
		public NoisePoint(int x, int y, int color, double noise) {
			this.x =  x;
			this.y = y;
			this.color = color;
			this.noise = noise;
		}
		public int getX() {
			return x;
		}
		public int getY() {
			return y;
		}
		public int getColor() {
			return color;
		}
		public double getNoise() {
			return noise;
		}
		
	}
	@Test
	public void TestPerlin() {
		/*
		JNoise noise = JNoise.newBuilder()
				.worley(WorleyNoiseGenerator.newBuilder())
			    .addDetailedTransformer(DomainWarpTransformer.newBuilder().setNoiseSource(SuperSimplexNoiseGenerator.newBuilder().build()).build())
			    .build();
		*/
		JNoiseDetailed<WorleyNoiseResult<Vector>> noise = JNoise.newBuilder()
				.gaussianWhite(500)
				.worley(WorleyNoiseGenerator.newBuilder().build())
	            .buildDetailed();
		PerlinNoiseGenerator perlinCosine = PerlinNoiseGenerator.newBuilder().setSeed(3301).setInterpolation(Interpolation.COSINE).build();
		JNoise noisePipeline=JNoise.newBuilder().perlin(3301,Interpolation.COSINE,FadeFunction.QUINTIC_POLY).build();
		int width = 500;
		int height = 500;
		Map<Vector, Integer> colorMap = new HashMap<>();

		BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		double wd = 0.0;
		for(int i = 0; i < width; i++) {
			double yd = 0.0;
			for(int j = 0; j < height; j++) {
				/*
				WorleyNoiseResult<Vector> noiseResult = noise.evaluateNoiseResult(wd, yd);
				Vector closestPoint = noiseResult.getClosestPoint();
				*/
				double d = perlinCosine.evaluateNoise(wd, yd);
				//double d = noisePipeline.evaluateNoise(wd, yd);
				int color = getColor(i, j, d);
				// logger.info(color + " <- " + d);
				//int color = colorMap.computeIfAbsent(closestPoint, point -> getRandomColor(point));
				//int pcolor = getPrimaryColor(closestPoint);
				//logger.info(color + " -> " + pcolor);
				// logger.info(i + ", " + j + " --> " + noiseResult.getValue() + " --> " + color);
				//int color = colorMap.computeIfAbsent(closestPoint, point -> getRandomColor(point));
				//dat[iter++] = noise.evaluateNoise(i, j);
				//int color = getRGBIntFromDecimalColor(closestPoint.x() - (int) closestPoint.x(), closestPoint.y() - (int) closestPoint.y(), 0.5);
				image.setRGB(i, j, color);
				yd += .01;
			}
			wd += .01;
		}
		File outputfile = new File("./test.png");
		try {
			ImageIO.write(image, "png", outputfile);
		} catch (IOException e) {
			logger.error(e);
		}
	}
	public int getRandomColor(Vector point) {
		//return getRGBIntFromDecimalColor((int)point.x(), (int)point.y(), 0.5);
		return getRGBIntFromDecimalColor(point.x() - (int) point.x(), point.y() - (int) point.y(), 0.5);
		//return getPrimary(point.x() - (int) point.x(), point.y() - (int) point.y(), 0.5);
	}
	public int getPrimaryColor(Vector point) {
		//return getRGBIntFromDecimalColor((int)point.x(), (int)point.y(), 0.5);
		return getPrimary(point.x() - (int) point.x(), point.y() - (int) point.y(), 0.5);
		//return getPrimary(point.x() - (int) point.x(), point.y() - (int) point.y(), 0.5);
	}
	/*
	static int pred = getRGBInt(255, 0, 0);
	static int pgreen = getRGBInt(0, 255, 0);
	static int pblue = getRGBInt(0, 0, 255);
	static int pyellow = getRGBInt(255, 255, 0);
	static int pmag = getRGBInt(255, 0, 255);
	static int pwhite = getRGBInt(255, 255, 255);
	
	List<Integer> primeColors = Arrays.asList(new Integer[] { pred, pgreen, pblue, pyellow, pmag, pwhite });
	*/
	class PColor extends Color{
		private String name = null;
		public PColor(String name, int r, int g, int b) {
			super(r, g, b);
			this.name = name;
		}
		public String getName() {
			return name;
		}
		public double distance(int r, int g, int b) {
			return Math.sqrt(Math.pow(this.getRed() - r, 2) + Math.pow(this.getGreen() - g, 2) + Math.pow(this.getBlue() - b, 2));
		}
		
	}
	public List<PColor> primeColors = Arrays.asList(new PColor[] {
		new PColor("red", 255, 0, 0),
		new PColor("orange", 255, 128, 0),
		new PColor("green", 0, 255, 0),
		new PColor("blue", 0, 0, 255),
		new PColor("yellow", 255, 255, 0),
		new PColor("magenta", 255, 0, 255),
		new PColor("black", 0, 0, 0)
		//new PColor("white", 255, 255, 255)
	});
	/*
	public int getPrimary(int color) {
		return primeColors.stream().min(Comparator.comparingInt(i -> Math.abs(i - color))).get();
	}
	*/
	private int getColor(int x, int y, double val) {
		// logger.info(x + ", " + y + " " + Math.abs(x-y)*val + ", " +  Math.abs(x+y)/val + ", " + ((x*y)/500)*val);
		//return getRGBIntFromDecimalColor(Math.sqrt(x) * val, Math.sqrt(y) * val, ((x*y)/500) * val);
		return getPrimary(Math.sqrt(x) * val, Math.sqrt(y) * val, ((x*y)/500) * val);
	}
	private static int getRGBInt(int red, int green, int blue){
	    long R = (red << 16) & 0x00FF0000;
	    long G = (green << 8) & 0x0000FF00;
	    long B = blue & 0x000000FF;
	    return (int) (0xFF000000 | R | G | B);
	}
	public int getPrimary(double red, double green, double blue) {
		Map<String, Double> primeMap = new HashMap<>();
		long R = Math.round(255 * red);
	    long G = Math.round(255 * green);
	    long B = Math.round(255 * blue);

	    R = (R << 16) & 0x00FF0000;
	    G = (G << 8) & 0x0000FF00;
	    B = B & 0x000000FF;

	    final long r2 = R;
	    final long g2 = G;
	    final long b2 = B;
	    return primeColors.stream().min(Comparator.comparingDouble(i -> i.distance((int)r2, (int)g2, (int)b2))).get().getRGB();
		
	}
	public static int getRGBIntFromDecimalColor(double red, double green, double blue) {
	    long R = Math.round(255 * red);
	    long G = Math.round(255 * green);
	    long B = Math.round(255 * blue);

	    R = (R << 16) & 0x00FF0000;
	    G = (G << 8) & 0x0000FF00;
	    B = B & 0x000000FF;

	    return (int) (0xFF000000 | R | G | B);
	}
}
